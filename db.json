{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/F.png","path":"F.png","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/L.png","path":"L.png","modified":1,"renderable":0},{"_id":"source/F_blue.png","path":"F_blue.png","modified":1,"renderable":0},{"_id":"source/superAndroid.jpg","path":"superAndroid.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/style.js","path":"style.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"73c67c330acd767eed7426e2eb019a5328bbe72c","modified":1475052616538},{"_id":"source/F.png","hash":"de26507f9bd7221f5cc11cdc89ad0d0cb40064c3","modified":1475117836000},{"_id":"source/README.md","hash":"ed0bbc224c737398a8727b221bd4615c9009f29b","modified":1475048036617},{"_id":"source/L.png","hash":"b101fdbb203b9bd7cc1025f69f505aba3907a0b8","modified":1474510583736},{"_id":"source/F_blue.png","hash":"33f1b4bce3eb298b11ccba223cb5e1563d6d85f7","modified":1475890896156},{"_id":"source/_config.yml","hash":"7fb8bdecb27aed375384b2ee5117b75610a0652f","modified":1475115550604},{"_id":"source/baidu_verify_JayQfR0BPv.html","hash":"f199a048e65aa6b985ecbf49d800505ab71c8a11","modified":1475914702570},{"_id":"source/superAndroid.jpg","hash":"5603068add572a9e1b33aa6873f02146e9db04b2","modified":1475891638248},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1475057449229},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1475057449234},{"_id":"themes/yilia/_config.yml","hash":"24cb9c3740e41cf46bc1f1a479b730b054f10fa7","modified":1475909249126},{"_id":"themes/yilia/README.md","hash":"dd311f8e8696bd89cf1790328d12b49d0e6b36da","modified":1475057449241},{"_id":"themes/yilia/package.json","hash":"f9f700b5cee8fa7d0571a41a8e0c6166ba78c377","modified":1475057449568},{"_id":"themes/yilia/webpack.config.js","hash":"924bbc926e4b36b945362cc5c5e77308b52f922c","modified":1475057450023},{"_id":"source/_posts/Retrofit入门介绍-1.md","hash":"5504197d34e630c51c0d47706235137ef09b6bd7","modified":1475913219280},{"_id":"source/_posts/hello-world.md","hash":"12da8c3d72a5b4a80bcd59779d82f02c285b1ec0","modified":1475220863729},{"_id":"source/_posts/图片加载库Glide学习总结.md","hash":"6673b8fbc9a6dc064167494362d6bb6faa7502be","modified":1475911955223},{"_id":"source/categories/index.md","hash":"7281b7ed2691deee2f26763f7b6b61c55d0ac304","modified":1475908722715},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1475057449186},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1475057449206},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1475057308100},{"_id":"themes/yilia/.git/index","hash":"71022f06cd01270a924293b502f2401e7b7813b4","modified":1475914784741},{"_id":"themes/yilia/.git/packed-refs","hash":"da91538826ece2ebda53cb5a4a634ce558cc28c1","modified":1475057449172},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1475057449260},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1475057449251},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1475057449255},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1475057449264},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1475057449268},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1475057449273},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1475057449277},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1475057449537},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1475057449544},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1475057449541},{"_id":"themes/yilia/layout/layout.ejs","hash":"6759bdc3646d6c03f9dbc7abffcb2b5e4522c724","modified":1475057449554},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475057449558},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475057449560},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1475057449563},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1475057308104},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1475057308109},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1475057308114},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1475057308118},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1475057308124},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1475057308130},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1475057308138},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1475057308143},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1475057308151},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1475057308156},{"_id":"themes/yilia/.git/logs/HEAD","hash":"2edbe282755634867e0597b3f1c4745fbef70087","modified":1475057449195},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"4cd14a06460d01c7429721998f63c8d15e446c33","modified":1475916891709},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1475057449310},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1475057449342},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"f523f175913628fd7eac8aed6bcf403deeac93e4","modified":1475911224774},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1475057449385},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1475057449377},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"ce1d2ca17e05c67cc0cb8c07cf05e6f8236a3e31","modified":1475057449395},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"63d53c26f6ef7d2b4d96de3a2d3d7bd385f8dfda","modified":1475057449402},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1475057449417},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"5b4597ddf03486fc15fd6ae77fd05582cbfdff13","modified":1475057449409},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"5f040ce3efed03adc5a0725187522bca800460f4","modified":1475057449422},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"fe0fd2f17b14d3fedfef43b6acadead38183b2a2","modified":1475057449529},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"0b4af12ecd49e8009ad5eeb60e2da2bf57f5c67f","modified":1475057449533},{"_id":"themes/yilia/source/main.js","hash":"3c8e9775059dce1540dca30ba5df4271e4bb76a3","modified":1475057449996},{"_id":"themes/yilia/source/style.js","hash":"f8077b061370c171972f380b83888a9a1f97d866","modified":1475896107928},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1475057449573},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1475057449578},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"3b384a11226a0f0c7b407c80e8224d99a4c6e7b8","modified":1475057449584},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"75f07aa38b0e56c7279c96d4d1a5061c3ba97a96","modified":1475914048285},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"ed5940f0881e36a75235ff8fbd024c8ee7b3cd46","modified":1475914054637},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1475057449593},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"58c055d54cf1c9551c8b71e9d8cbe1715593bebb","modified":1475057449618},{"_id":"themes/yilia/source-src/css/article.scss","hash":"c8ebe42f99736b07f9aa79bff595b9059c523fe1","modified":1475914074139},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7d2e6d6ce87732fe5b3799a6e9e1f737a79ed736","modified":1475057449668},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"1c79e1cd8b00d6d89cca00c2a101e6639c378a9b","modified":1475057449671},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1475057449700},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1475057449697},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"9b660a5a820caf394ae497f262e80f9ed35bf219","modified":1475057449703},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"a3e9d2878f67b927ff0f8c492f7eb676c72c08cc","modified":1475908170235},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0940b74a29101c97573efd8e492ee39cef5e2dc8","modified":1475057449731},{"_id":"themes/yilia/source-src/css/main.scss","hash":"bdd600d274233c001a0fb89f7f89af66bb04a147","modified":1475057449736},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"facd3d41bc9b2d2c6134fc0fbd379a3b0c18476b","modified":1475057449741},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1475057449749},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"0ca3752966fdce7919442174a7a4cb769a3bec74","modified":1475057449745},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1475057449753},{"_id":"themes/yilia/source-src/css/social.scss","hash":"ccb2c214d2c0efae41066fa85afb4d7288e55cbf","modified":1475057449757},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"a4c1872aff9509441f4d723801a9b3f7db161a41","modified":1475057449765},{"_id":"themes/yilia/source-src/css/style.js","hash":"6c4cb072d0d5cbbb5291aa255dee31c7b13cfe66","modified":1475057449760},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1475057449769},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"eed50d74e5f272af5dc5f7f335ded2c95bb5359f","modified":1475057449773},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"0882c3b2cf3d9228bd74d91c37fb531b735d732a","modified":1475057449777},{"_id":"themes/yilia/source-src/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475057449778},{"_id":"themes/yilia/source-src/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475057449779},{"_id":"themes/yilia/source-src/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475057449782},{"_id":"themes/yilia/source-src/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475057449781},{"_id":"themes/yilia/source-src/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475057449783},{"_id":"themes/yilia/source-src/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475057449784},{"_id":"themes/yilia/source-src/fancybox/jquery.fancybox.js","hash":"2c62901b59f10e90f432ee34926c90c9d3ded983","modified":1475057449834},{"_id":"themes/yilia/source-src/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1475057449846},{"_id":"themes/yilia/source-src/fancybox/jquery.fancybox.scss","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1475057449849},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"7a80e2fe52212adc5a45aaae07d397fe93460fad","modified":1475057449852},{"_id":"themes/yilia/source-src/js/browser.js","hash":"bb2e9a1ddcb34372e6cbdd9e9ecfd3dc87623451","modified":1475057449855},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"940b580d6243461788c28bdd09b8049642a90e13","modified":1475057449858},{"_id":"themes/yilia/source-src/js/main.js","hash":"8fc971ac4912c38c7a0ec0cb4c9b0935655db056","modified":1475057449882},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"481ecf50b72197fa6e52d92e8368e4fe2749230f","modified":1475057449888},{"_id":"themes/yilia/source-src/js/tags.js","hash":"a8da9d6e3031c960f9859ef519233ad3ab65d0ef","modified":1475057449891},{"_id":"themes/yilia/source-src/js/tools.js","hash":"eb36f563b76e9431dc109856a78383ed11763a84","modified":1475057449895},{"_id":"themes/yilia/source-src/js/util.js","hash":"cf91a9c9c973e2ee05d50a24a11c411c36264238","modified":1475057449903},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c470a96b30159285d7c8ef1c8e8dd4c818933747","modified":1475057449907},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"05fa305ec449deb59b04e2ae118a8e3ec5250e1b","modified":1475057449922},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"852a1fcdaacf66754090fc6d432013c5c657ab80","modified":1475057449937},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"39806b9989eaecbc3e032da8de77f69e0c9ff779","modified":1475057449967},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"b80bb4efe9ac36a566f037fb6984af8b486a9d5c","modified":1475057449969},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"b616337e586eaa5afcf5bb77c927bd1b09a25524","modified":1475057449949},{"_id":"themes/yilia/.git/objects/pack/pack-cef498d93376744b07ed935af574e726980bcb27.idx","hash":"a041c49088d36e843c48c57a362375311c1597ef","modified":1475057449003},{"_id":"themes/yilia/.git/refs/heads/master","hash":"d923501cd4ac613bf93ba1a42daf6ea20c5edebc","modified":1475057449192},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"2fd6338379fd50ea8282f065ffadc838f94e6015","modified":1475057449431},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"d5c0e472dd9e8b036f977745ff50056813f6b1b0","modified":1475057449453},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1475057449464},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"5b3583114f45a3f8017a6ff900d1b72ddea2a6df","modified":1475057449482},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1475057449473},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"f6204220060a2b77a609fcaaa81f639d0b02e3af","modified":1475057449495},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"e6edf173da77fb851fc067a481a897ad934cc4ca","modified":1475057449511},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1475057449519},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"8381a373d85daee53cc3247467ffa4db58ae1b88","modified":1475057449639},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1475057449646},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1475057449659},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1475057449665},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"4dd97aa8aa0ffb312a7d3c6e0f82b85642f7f2e7","modified":1475057449653},{"_id":"themes/yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1475057449676},{"_id":"themes/yilia/source-src/css/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1475057449682},{"_id":"themes/yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1475057449693},{"_id":"themes/yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1475057449687},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1475057449712},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1475057449711},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1475057449714},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1475057449713},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1475057449715},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1475057449716},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1475057449717},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1475057449719},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1475057449718},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1475057449720},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1475057449721},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1475057449722},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1475057449723},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1475057449724},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1475057449725},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1475057449726},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1475057449727},{"_id":"themes/yilia/source-src/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475057449785},{"_id":"themes/yilia/source-src/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1475057449789},{"_id":"themes/yilia/source-src/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1475057449800},{"_id":"themes/yilia/source-src/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1475057449809},{"_id":"themes/yilia/source-src/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1475057449813},{"_id":"themes/yilia/source-src/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1475057449823},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1475057449908},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"3f8f8062d24cce2158d3c02bdfc56c000f1a1f9b","modified":1475057449911},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1475057449915},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1475057449914},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1475057449710},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"2edbe282755634867e0597b3f1c4745fbef70087","modified":1475057449194},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1475057449178},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1475057449880},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"2edbe282755634867e0597b3f1c4745fbef70087","modified":1475057449185},{"_id":"themes/yilia/.git/objects/pack/pack-cef498d93376744b07ed935af574e726980bcb27.pack","hash":"78b64af2f0841f5c7e6dcc28281881efdf73af6e","modified":1475057449046},{"_id":"public/baidusitemap.xml","hash":"eb8c226f558ee6d9a18bbc828c32ceadbd01f233","modified":1475917489539},{"_id":"public/sitemap.xml","hash":"b9f3cd5793d15ba4bcbb4a50c6ee44f8076d2976","modified":1475917489612},{"_id":"public/baidu_verify_JayQfR0BPv.html","hash":"e10f0fc9a8ea00f70c0fb8b9db915f0a35a2a372","modified":1475917489622},{"_id":"public/categories/index.html","hash":"32fa3af04a400f8940203d776d550808bdebd0d3","modified":1475917489622},{"_id":"public/2016/09/28/hello-world/index.html","hash":"2c069044acda0183e29ec400e70a958301d312ff","modified":1475917489622},{"_id":"public/archives/index.html","hash":"882f6b89f322c41fcb848201157a9d6cdffba9c1","modified":1475917489622},{"_id":"public/archives/2016/index.html","hash":"ab2bdeb641a0a801f978542af8bca8b77e58ae72","modified":1475917489622},{"_id":"public/archives/2016/09/index.html","hash":"f52c277f56824ad27e1b86e95085be8f85ab0cbb","modified":1475917489622},{"_id":"public/archives/2016/10/index.html","hash":"da2233b7fef7dc2cc4001e0a67e9839a2a22eca5","modified":1475917489622},{"_id":"public/tags/Android/index.html","hash":"77e0df089e69b2b7693aa9e8aceb14488610baf7","modified":1475917489622},{"_id":"public/tags/Retrofit/index.html","hash":"9e9a7c6c7b7277619be26de6b97620427c03dcc4","modified":1475917489622},{"_id":"public/tags/hexo/index.html","hash":"d26168c44fefbc329ed05716081b24aca8d7b0a5","modified":1475917489622},{"_id":"public/tags/Http/index.html","hash":"49baf92be9faa8a7b1b8277646a100f769b837fd","modified":1475917489622},{"_id":"public/tags/Glide/index.html","hash":"8194446996b4356fb7b257d0cae598ee1938b8e0","modified":1475917489622},{"_id":"public/tags/图片加载库/index.html","hash":"ba5f5923ce77c19373b78e8899c7c5316b544206","modified":1475917489623},{"_id":"public/index.html","hash":"12d45e622eee07acdc231b515ee31434c6285ea4","modified":1475917489623},{"_id":"public/2016/10/08/图片加载库Glide学习总结/index.html","hash":"54ee2c40842e55b039193118e4ae80713c84c64d","modified":1475917489623},{"_id":"public/2016/09/30/Retrofit入门介绍-1/index.html","hash":"807b3f600707cfa2e39e85cc5ac56f855a947271","modified":1475917489623},{"_id":"public/CNAME","hash":"73c67c330acd767eed7426e2eb019a5328bbe72c","modified":1475917489625},{"_id":"public/F.png","hash":"de26507f9bd7221f5cc11cdc89ad0d0cb40064c3","modified":1475917489625},{"_id":"public/L.png","hash":"b101fdbb203b9bd7cc1025f69f505aba3907a0b8","modified":1475917489625},{"_id":"public/README.md","hash":"ed0bbc224c737398a8727b221bd4615c9009f29b","modified":1475917489625},{"_id":"public/F_blue.png","hash":"33f1b4bce3eb298b11ccba223cb5e1563d6d85f7","modified":1475917489625},{"_id":"public/superAndroid.jpg","hash":"5603068add572a9e1b33aa6873f02146e9db04b2","modified":1475917489625},{"_id":"public/style.js","hash":"23ee8d41e49384e8edf7457952c39a1b06bb7d07","modified":1475917489631},{"_id":"public/main.js","hash":"9564ebaff9fb17e4911ba30cb1da63be8a1a64e9","modified":1475917489631}],"Category":[],"Data":[],"Page":[{"_content":"JayQfR0BPv","source":"baidu_verify_JayQfR0BPv.html","raw":"JayQfR0BPv","date":"2016-10-08T08:18:22.570Z","updated":"2016-10-08T08:18:22.570Z","path":"baidu_verify_JayQfR0BPv.html","title":"","comments":1,"layout":"page","_id":"ciu0z5z1n000018fu26hijxfy","content":"JayQfR0BPv","excerpt":"","more":"JayQfR0BPv"},{"title":"categories","date":"2016-09-30T06:38:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-30 14:38:29\ntype: \"categories\"\n---\n","updated":"2016-10-08T06:38:42.715Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciu0z5z2q000c18fudind1b59","content":"","excerpt":"","more":""}],"Post":[{"title":"Retrofit入门介绍","date":"2016-09-30T06:13:59.000Z","toc":true,"_content":"\n**在这次的项目中，由于服务端采用Restful原则提供接口，所以在手机客户端调用接口时，考虑使用现在很流行的Retrofit网络请求框架，很多情况下，和Retrofit搭配使用的是RxJava，他们堪称\"黄金组合\"，功能强大。**\n<!--more-->\n还有其他使用率也很高的网络框架，包括google官方提供的一个，关于在项目如何选择，可以参考stormzhang大神写的一篇博客。\n博客地址为：[ANDROID开源项目推荐之「网络请求哪家强」][1]\n\n---\n\n## 1.0 Restful\n百度百科：Restful\n\n> 一种软件架构风格，是一种设计风格而不是标准，只是提供了一组设计原则和约束条件，主要用于客户端和服务器交互的软件或系统。基于这个风格设计的软件可以更加简洁，更有层次，更易于实现缓存等机制。\n\n\n## 2.0 Retrofit\n\n> **Type-safe HTTP client for Android and Java by Square**\nRetrofit官网地址:[http://square.github.io/retrofit/][2]                                          \nRetrofit github地址:[https://github.com/square/retrofit][3]\n\n\n\n### 2.0.1 创建Retrofit对象\n在项目中使用需要在模块下面的`build.gradle`中添加如下依赖：\n\n> compile 'com.squareup.retrofit2:retrofit:2.1.0'<br>\n> compile 'com.squareup.retrofit2:converter-gson:2.1.0'\n\n如果需要使用RxJava，也需要添加相应的依赖：\n> compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'\n\n创建Retrofit对象需要使用`Builder`，指定`BASR_URL`和添加`Converter`.\n\n\n``` java\npublic class RetrofitClient{\n\tpublic static String Base_url = \"http://\"+server_addr+\":\"+port+\"VIID-V5/\";\n    public static Retrofit getClient(){\n    \t\tRetrofit retrofit = new Retrofit.Builder()\n            \t.baseUrl(Base_url)\n            \t.addConverterFactory(GsonConverterFactory.create())\n            \t.build();\n                \n             return retrofit;\n    }\n}\n```\nserver_addr和port：是要请求的服务器地址和端口。在编写请求接口时，是相对base_url而言的。\nRetrofit2必须要以`/`结束，不然会抛出`非法参数异常`。\n\n### 2.0.2 请求接口定义\n\n``` java\npublic interface LoginApi{\n\t@Headers({\"Contant-Type:application/json\",\"Accept:application/json\"})\n\t@POST(\"login/\")\n    Call<TokenBean> login(@Body LoginInfo loginInfo);\n}\n```\n登录发送Post请求，因此接口含有注解`@POST`，可以看出登录请求的完整地址为`http://\"+server_addr+\":\"+port+\"VIID-V5/login`，发送POST请求，因此含有请求消息体，为`JSON`数据格式，可以在android studio安装插件`Gson format`，将json数据格式转换为实体类。相应也是json数据，也可以转为实体类得到相应数据。\n\n``` java\n/**\n\t登录请求实体类\n*/\npublic class LoginInfo{\n\t/**\n    username:admin\n    password:admin\n    */\n    private String username;\n    //当字段与json中的不一致时，可以使用字段@SerializedName\n    @SerializedName(\"passwd\")\n    private String password;\n    \n    public void setUsername(String username){\n    \tthis.username = username;\n    }\n    public void setPassword(String password){\n    \tthis.password = password;\n    }\n    \n    //TODO:get()\n    //TODO:toString()\n}\n\n/**\n\t相应实体类：服务端相应一般都会包含错误码和错误信息\n*/\npublic class TokenBean{\n\tprivate int errCode;\n    private String errMsg;\n    private String access_token;   //请求数据的令牌\n    \n    //TODO:set()\n    //TODO:get()\n    //TODO:toString()\n}\n```\n### 2.0.3 接口调用\n\n``` java\n\tpublic class LoginService{\n    \tpublic static LoginApi api;\n        //登陆结果回调\n        public interface ILoginListener{\n        \tvoid loginSuccess();\n            void loginFailed(String errInfo);\n        }\n        public static void login(LoginInfo info,ILoginListener listener){\n        \tapi = Retrofit.getClient().create(LoginApi.class);   //代理对象\n            api.login(info).enqueue(new Callback<TokenBean>(){\n            \t\t@Override\n                    public void onResponse(Call<GitModel> call, Response<GitModel> response) {\n                        //服务端响应信息\n                        if(response == null || response.body() == null){\n                        \tlistener.loginFailed(\"响应消息为空，检查网络连接是否正常!\");\n                            return；\n                        }\n                        \n                        if(response.code() == 200 && response.body().getErrCode() == 0){\n                        \t//login successful\n                            listener.loginSuccess();\n                            //对于其他查询的请求，判断请求成功后，拿到服务端返回的数据\n                        }else if(response.code() == 404){\n                        \tlistener.loginFailed(\"404: 页面找不到\");\n                        }else if(response.code() == 500){\n                        \tlistener.loginFailed(\"500: 服务器异常\");\n                        }else{\n                        \tlistener.loginFailed(reponse.code + \"：其他异常信息\");\n                        }\n                    }\n\n                    @Override\n                    public void onFailure(Call<GitModel> call, Throwable t) {\n                        //服务端响应失败的信息\n                        listener.loginFailed(t.getMessage());    //回调出响应超时信息\n                    }\n                    });\n            }\n        }\n    }\n```\n一般的Retrofit使用就是这样的流程，在大型项目中，可以根据项目需要，进行自定义。\n\n## 3.0 Retrofit注解详情\n\n### 3.0.1 请求方法\n\n\n|  请求方法   |  方法简单描述 | \n| :---: | :---: | \n|  POST  |  post请求，信息包含在请求体RequestBody中，一般用于添加   |  \n| GET | get请求方式，参数包含在Url ，一般用于查询 |\n| DELETE    |  删除数据    | \n|   PUT  |  修改数据  | \n|   PATCH  |    | \n|   HEAD  |    | \n|  OPTIONS  |   | \n|  HTTP  | @HTTP(method=\"get\",path=\"login/\",hasBody=true)   | \n\n### 3.0.2 标记\n\n|          | 标记           | 简单描述                                                                 |\n| :--------: | :--------------: | :------------------------------------------------------------------------: |\n| 表单请求 | FormUrlEncoded | 表示请求体是一个form表单，Content-Type:application/x-www-form-urlencoded |\n| 表单请求 | Multipart      | 请求体是一个支持文件上传的form表单，Content-Type:multipart/form-data     |\n|          | Streaming      |   表示响应体的数据用流的形式返回，如果没有使用该注解，默认会把数据全部载入内存，之后通过流获取数据也不过是读取内存中的数据，所以如果返回的数据比较大，就需要使用这个注解                                                                     |\n\n### 3.0.3 参数注解\n|位置|参数注解|描述|\n|:-----:|:--------:|:--------------------------:|\n|作用于方法|Headers|用于添加请求头|\n|作用于方法参数|Header|用于添加不固定值得Header，也用于鉴权的目的|\n|作用于方法参数|Body|用于非表单请求体|\n|作用于方法参数|Field/FieldMap|用于表单字段，与FormUrlEncoded配合使用|\n|作用于方法参数|Part/PartMap|用于表单字段，与Multipart配合使用，用于有文件上传的情况，PartMap的接受类型是Map<String,String>，非String会调用toString()|\n|作用于方法参数|Path|用于URL，参数是URL的一部分|\n|作用于方法参数|Query/QueryMap|用于URL，比如：@Query(\"id\")，http://127.0.0.1:8080/users/id=10 |\n|作用于方法参数|Url|完整的URL|\n\n 1. {占位符}和Path尽量只用在URL的path部分，url中的参数用Query和QueryMap代替\n 2. Query/Field和Part这三者都支持数组和实现了Iterable接口的类型，比如List/Set。\n 3. 添加head信息，动态添加和静态添加\n\n``` java\n\tCall<String> getData(@Query(\"item[]\") List<Integer> item);\n    // -----------------------------------\n    @GET(\"user\")\n\tCall<User> getUser(@Header(\"Authorization\") String authorization)\n\t\n    @Headers(\"Cahce-Control:max-age=640000\")\n```\n\n\n### 3.0.4 数据类型转换器\n\nRetrofit支持的数据类型转换器\n - Gson: com.squareup.retrofit2:converter-gson:2.1.0\n - Jackson: com.squareup.retrofit2:converter-jackson:2.1.0\n - Moshi: com.squareup.retrofit2:converter-moshi:2.1.0\n - Protobuf: com.squareup.retrofit2:converter-protobuf:2.1.0\n - Wire: com.squareup.retrofit2:converter-wire:2.1.0\n - Simple XML: com.squareup.retrofit2:converter-simplexml:2.1.0\n - Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars:2.1.0\n\nRetrofit提供的`CallAdapter`：\n\n| name   | build.gradle中的依赖                        |\n| :------: | :-------------------------------------------: |\n| rxjava | com.squareup.retrofit2:adapter-rxjava:2.1.0 |\n| java8  | com.squareup.retrofit2:adapter-java8:2.1.0  |\n| guava  |   com.squareup.retrofit2:adapter-guava:2.1.0         |\n\n  [1]: http://stormzhang.com/opensource/2016/08/05/android-open-source-project-recommend2/\n  [2]: http://square.github.io/retrofit/\n  [3]: https://github.com/square/retrofit\n","source":"_posts/Retrofit入门介绍-1.md","raw":"---\ntitle: Retrofit入门介绍\ndate: 2016-09-30 14:13:59\ntags: \n\t- Android\n\t- Retrofit\n\t- Http\ntoc: true\n---\n\n**在这次的项目中，由于服务端采用Restful原则提供接口，所以在手机客户端调用接口时，考虑使用现在很流行的Retrofit网络请求框架，很多情况下，和Retrofit搭配使用的是RxJava，他们堪称\"黄金组合\"，功能强大。**\n<!--more-->\n还有其他使用率也很高的网络框架，包括google官方提供的一个，关于在项目如何选择，可以参考stormzhang大神写的一篇博客。\n博客地址为：[ANDROID开源项目推荐之「网络请求哪家强」][1]\n\n---\n\n## 1.0 Restful\n百度百科：Restful\n\n> 一种软件架构风格，是一种设计风格而不是标准，只是提供了一组设计原则和约束条件，主要用于客户端和服务器交互的软件或系统。基于这个风格设计的软件可以更加简洁，更有层次，更易于实现缓存等机制。\n\n\n## 2.0 Retrofit\n\n> **Type-safe HTTP client for Android and Java by Square**\nRetrofit官网地址:[http://square.github.io/retrofit/][2]                                          \nRetrofit github地址:[https://github.com/square/retrofit][3]\n\n\n\n### 2.0.1 创建Retrofit对象\n在项目中使用需要在模块下面的`build.gradle`中添加如下依赖：\n\n> compile 'com.squareup.retrofit2:retrofit:2.1.0'<br>\n> compile 'com.squareup.retrofit2:converter-gson:2.1.0'\n\n如果需要使用RxJava，也需要添加相应的依赖：\n> compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'\n\n创建Retrofit对象需要使用`Builder`，指定`BASR_URL`和添加`Converter`.\n\n\n``` java\npublic class RetrofitClient{\n\tpublic static String Base_url = \"http://\"+server_addr+\":\"+port+\"VIID-V5/\";\n    public static Retrofit getClient(){\n    \t\tRetrofit retrofit = new Retrofit.Builder()\n            \t.baseUrl(Base_url)\n            \t.addConverterFactory(GsonConverterFactory.create())\n            \t.build();\n                \n             return retrofit;\n    }\n}\n```\nserver_addr和port：是要请求的服务器地址和端口。在编写请求接口时，是相对base_url而言的。\nRetrofit2必须要以`/`结束，不然会抛出`非法参数异常`。\n\n### 2.0.2 请求接口定义\n\n``` java\npublic interface LoginApi{\n\t@Headers({\"Contant-Type:application/json\",\"Accept:application/json\"})\n\t@POST(\"login/\")\n    Call<TokenBean> login(@Body LoginInfo loginInfo);\n}\n```\n登录发送Post请求，因此接口含有注解`@POST`，可以看出登录请求的完整地址为`http://\"+server_addr+\":\"+port+\"VIID-V5/login`，发送POST请求，因此含有请求消息体，为`JSON`数据格式，可以在android studio安装插件`Gson format`，将json数据格式转换为实体类。相应也是json数据，也可以转为实体类得到相应数据。\n\n``` java\n/**\n\t登录请求实体类\n*/\npublic class LoginInfo{\n\t/**\n    username:admin\n    password:admin\n    */\n    private String username;\n    //当字段与json中的不一致时，可以使用字段@SerializedName\n    @SerializedName(\"passwd\")\n    private String password;\n    \n    public void setUsername(String username){\n    \tthis.username = username;\n    }\n    public void setPassword(String password){\n    \tthis.password = password;\n    }\n    \n    //TODO:get()\n    //TODO:toString()\n}\n\n/**\n\t相应实体类：服务端相应一般都会包含错误码和错误信息\n*/\npublic class TokenBean{\n\tprivate int errCode;\n    private String errMsg;\n    private String access_token;   //请求数据的令牌\n    \n    //TODO:set()\n    //TODO:get()\n    //TODO:toString()\n}\n```\n### 2.0.3 接口调用\n\n``` java\n\tpublic class LoginService{\n    \tpublic static LoginApi api;\n        //登陆结果回调\n        public interface ILoginListener{\n        \tvoid loginSuccess();\n            void loginFailed(String errInfo);\n        }\n        public static void login(LoginInfo info,ILoginListener listener){\n        \tapi = Retrofit.getClient().create(LoginApi.class);   //代理对象\n            api.login(info).enqueue(new Callback<TokenBean>(){\n            \t\t@Override\n                    public void onResponse(Call<GitModel> call, Response<GitModel> response) {\n                        //服务端响应信息\n                        if(response == null || response.body() == null){\n                        \tlistener.loginFailed(\"响应消息为空，检查网络连接是否正常!\");\n                            return；\n                        }\n                        \n                        if(response.code() == 200 && response.body().getErrCode() == 0){\n                        \t//login successful\n                            listener.loginSuccess();\n                            //对于其他查询的请求，判断请求成功后，拿到服务端返回的数据\n                        }else if(response.code() == 404){\n                        \tlistener.loginFailed(\"404: 页面找不到\");\n                        }else if(response.code() == 500){\n                        \tlistener.loginFailed(\"500: 服务器异常\");\n                        }else{\n                        \tlistener.loginFailed(reponse.code + \"：其他异常信息\");\n                        }\n                    }\n\n                    @Override\n                    public void onFailure(Call<GitModel> call, Throwable t) {\n                        //服务端响应失败的信息\n                        listener.loginFailed(t.getMessage());    //回调出响应超时信息\n                    }\n                    });\n            }\n        }\n    }\n```\n一般的Retrofit使用就是这样的流程，在大型项目中，可以根据项目需要，进行自定义。\n\n## 3.0 Retrofit注解详情\n\n### 3.0.1 请求方法\n\n\n|  请求方法   |  方法简单描述 | \n| :---: | :---: | \n|  POST  |  post请求，信息包含在请求体RequestBody中，一般用于添加   |  \n| GET | get请求方式，参数包含在Url ，一般用于查询 |\n| DELETE    |  删除数据    | \n|   PUT  |  修改数据  | \n|   PATCH  |    | \n|   HEAD  |    | \n|  OPTIONS  |   | \n|  HTTP  | @HTTP(method=\"get\",path=\"login/\",hasBody=true)   | \n\n### 3.0.2 标记\n\n|          | 标记           | 简单描述                                                                 |\n| :--------: | :--------------: | :------------------------------------------------------------------------: |\n| 表单请求 | FormUrlEncoded | 表示请求体是一个form表单，Content-Type:application/x-www-form-urlencoded |\n| 表单请求 | Multipart      | 请求体是一个支持文件上传的form表单，Content-Type:multipart/form-data     |\n|          | Streaming      |   表示响应体的数据用流的形式返回，如果没有使用该注解，默认会把数据全部载入内存，之后通过流获取数据也不过是读取内存中的数据，所以如果返回的数据比较大，就需要使用这个注解                                                                     |\n\n### 3.0.3 参数注解\n|位置|参数注解|描述|\n|:-----:|:--------:|:--------------------------:|\n|作用于方法|Headers|用于添加请求头|\n|作用于方法参数|Header|用于添加不固定值得Header，也用于鉴权的目的|\n|作用于方法参数|Body|用于非表单请求体|\n|作用于方法参数|Field/FieldMap|用于表单字段，与FormUrlEncoded配合使用|\n|作用于方法参数|Part/PartMap|用于表单字段，与Multipart配合使用，用于有文件上传的情况，PartMap的接受类型是Map<String,String>，非String会调用toString()|\n|作用于方法参数|Path|用于URL，参数是URL的一部分|\n|作用于方法参数|Query/QueryMap|用于URL，比如：@Query(\"id\")，http://127.0.0.1:8080/users/id=10 |\n|作用于方法参数|Url|完整的URL|\n\n 1. {占位符}和Path尽量只用在URL的path部分，url中的参数用Query和QueryMap代替\n 2. Query/Field和Part这三者都支持数组和实现了Iterable接口的类型，比如List/Set。\n 3. 添加head信息，动态添加和静态添加\n\n``` java\n\tCall<String> getData(@Query(\"item[]\") List<Integer> item);\n    // -----------------------------------\n    @GET(\"user\")\n\tCall<User> getUser(@Header(\"Authorization\") String authorization)\n\t\n    @Headers(\"Cahce-Control:max-age=640000\")\n```\n\n\n### 3.0.4 数据类型转换器\n\nRetrofit支持的数据类型转换器\n - Gson: com.squareup.retrofit2:converter-gson:2.1.0\n - Jackson: com.squareup.retrofit2:converter-jackson:2.1.0\n - Moshi: com.squareup.retrofit2:converter-moshi:2.1.0\n - Protobuf: com.squareup.retrofit2:converter-protobuf:2.1.0\n - Wire: com.squareup.retrofit2:converter-wire:2.1.0\n - Simple XML: com.squareup.retrofit2:converter-simplexml:2.1.0\n - Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars:2.1.0\n\nRetrofit提供的`CallAdapter`：\n\n| name   | build.gradle中的依赖                        |\n| :------: | :-------------------------------------------: |\n| rxjava | com.squareup.retrofit2:adapter-rxjava:2.1.0 |\n| java8  | com.squareup.retrofit2:adapter-java8:2.1.0  |\n| guava  |   com.squareup.retrofit2:adapter-guava:2.1.0         |\n\n  [1]: http://stormzhang.com/opensource/2016/08/05/android-open-source-project-recommend2/\n  [2]: http://square.github.io/retrofit/\n  [3]: https://github.com/square/retrofit\n","slug":"Retrofit入门介绍-1","published":1,"updated":"2016-10-08T07:53:39.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu0z5z25000118fur00qxup1","content":"<p><strong>在这次的项目中，由于服务端采用Restful原则提供接口，所以在手机客户端调用接口时，考虑使用现在很流行的Retrofit网络请求框架，很多情况下，和Retrofit搭配使用的是RxJava，他们堪称”黄金组合”，功能强大。</strong><br><a id=\"more\"></a><br>还有其他使用率也很高的网络框架，包括google官方提供的一个，关于在项目如何选择，可以参考stormzhang大神写的一篇博客。<br>博客地址为：<a href=\"http://stormzhang.com/opensource/2016/08/05/android-open-source-project-recommend2/\" target=\"_blank\" rel=\"external\">ANDROID开源项目推荐之「网络请求哪家强」</a></p>\n<hr>\n<h2 id=\"1-0-Restful\"><a href=\"#1-0-Restful\" class=\"headerlink\" title=\"1.0 Restful\"></a>1.0 Restful</h2><p>百度百科：Restful</p>\n<blockquote>\n<p>一种软件架构风格，是一种设计风格而不是标准，只是提供了一组设计原则和约束条件，主要用于客户端和服务器交互的软件或系统。基于这个风格设计的软件可以更加简洁，更有层次，更易于实现缓存等机制。</p>\n</blockquote>\n<h2 id=\"2-0-Retrofit\"><a href=\"#2-0-Retrofit\" class=\"headerlink\" title=\"2.0 Retrofit\"></a>2.0 Retrofit</h2><blockquote>\n<p><strong>Type-safe HTTP client for Android and Java by Square</strong><br>Retrofit官网地址:<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a><br>Retrofit github地址:<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a></p>\n</blockquote>\n<h3 id=\"2-0-1-创建Retrofit对象\"><a href=\"#2-0-1-创建Retrofit对象\" class=\"headerlink\" title=\"2.0.1 创建Retrofit对象\"></a>2.0.1 创建Retrofit对象</h3><p>在项目中使用需要在模块下面的<code>build.gradle</code>中添加如下依赖：</p>\n<blockquote>\n<p>compile ‘com.squareup.retrofit2:retrofit:2.1.0’<br><br>compile ‘com.squareup.retrofit2:converter-gson:2.1.0’</p>\n</blockquote>\n<p>如果需要使用RxJava，也需要添加相应的依赖：</p>\n<blockquote>\n<p>compile ‘com.squareup.retrofit2:adapter-rxjava:2.1.0’</p>\n</blockquote>\n<p>创建Retrofit对象需要使用<code>Builder</code>，指定<code>BASR_URL</code>和添加<code>Converter</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetrofitClient</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Base_url = <span class=\"string\">\"http://\"</span>+server_addr+<span class=\"string\">\":\"</span>+port+<span class=\"string\">\"VIID-V5/\"</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Retrofit <span class=\"title\">getClient</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    \t\tRetrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">            \t.baseUrl(Base_url)</div><div class=\"line\">            \t.addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">            \t.build();</div><div class=\"line\">                </div><div class=\"line\">             <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>server_addr和port：是要请求的服务器地址和端口。在编写请求接口时，是相对base_url而言的。<br>Retrofit2必须要以<code>/</code>结束，不然会抛出<code>非法参数异常</code>。</p>\n<h3 id=\"2-0-2-请求接口定义\"><a href=\"#2-0-2-请求接口定义\" class=\"headerlink\" title=\"2.0.2 请求接口定义\"></a>2.0.2 请求接口定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginApi</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Headers</span>(&#123;<span class=\"string\">\"Contant-Type:application/json\"</span>,<span class=\"string\">\"Accept:application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@POST</span>(<span class=\"string\">\"login/\"</span>)</div><div class=\"line\">    <span class=\"function\">Call&lt;TokenBean&gt; <span class=\"title\">login</span><span class=\"params\">(@Body LoginInfo loginInfo)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>登录发送Post请求，因此接口含有注解<code>@POST</code>，可以看出登录请求的完整地址为<code>http://&quot;+server_addr+&quot;:&quot;+port+&quot;VIID-V5/login</code>，发送POST请求，因此含有请求消息体，为<code>JSON</code>数据格式，可以在android studio安装插件<code>Gson format</code>，将json数据格式转换为实体类。相应也是json数据，也可以转为实体类得到相应数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">\t登录请求实体类</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInfo</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">    username:admin</div><div class=\"line\">    password:admin</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> String username;</div><div class=\"line\">    <span class=\"comment\">//当字段与json中的不一致时，可以使用字段@SerializedName</span></div><div class=\"line\">    <span class=\"meta\">@SerializedName</span>(<span class=\"string\">\"passwd\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String password;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.password = password;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>get()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>toString()</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">\t相应实体类：服务端相应一般都会包含错误码和错误信息</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenBean</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> errCode;</div><div class=\"line\">    <span class=\"keyword\">private</span> String errMsg;</div><div class=\"line\">    <span class=\"keyword\">private</span> String access_token;   <span class=\"comment\">//请求数据的令牌</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>set()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>get()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>toString()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-0-3-接口调用\"><a href=\"#2-0-3-接口调用\" class=\"headerlink\" title=\"2.0.3 接口调用\"></a>2.0.3 接口调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginService</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoginApi api;</div><div class=\"line\">       <span class=\"comment\">//登陆结果回调</span></div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILoginListener</span></span>&#123;</div><div class=\"line\">       \t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginSuccess</span><span class=\"params\">()</span></span>;</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginFailed</span><span class=\"params\">(String errInfo)</span></span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(LoginInfo info,ILoginListener listener)</span></span>&#123;</div><div class=\"line\">       \tapi = Retrofit.getClient().create(LoginApi.class);   <span class=\"comment\">//代理对象</span></div><div class=\"line\">           api.login(info).enqueue(<span class=\"keyword\">new</span> Callback&lt;TokenBean&gt;()&#123;</div><div class=\"line\">           \t\t<span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;GitModel&gt; call, Response&lt;GitModel&gt; response)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">//服务端响应信息</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>(response == <span class=\"keyword\">null</span> || response.body() == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"响应消息为空，检查网络连接是否正常!\"</span>);</div><div class=\"line\">                           <span class=\"keyword\">return</span>；</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       </div><div class=\"line\">                       <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">200</span> &amp;&amp; response.body().getErrCode() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                       \t<span class=\"comment\">//login successful</span></div><div class=\"line\">                           listener.loginSuccess();</div><div class=\"line\">                           <span class=\"comment\">//对于其他查询的请求，判断请求成功后，拿到服务端返回的数据</span></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">404</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"404: 页面找不到\"</span>);</div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">500</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"500: 服务器异常\"</span>);</div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                       \tlistener.loginFailed(reponse.code + <span class=\"string\">\"：其他异常信息\"</span>);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;GitModel&gt; call, Throwable t)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">//服务端响应失败的信息</span></div><div class=\"line\">                       listener.loginFailed(t.getMessage());    <span class=\"comment\">//回调出响应超时信息</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">                   &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>一般的Retrofit使用就是这样的流程，在大型项目中，可以根据项目需要，进行自定义。</p>\n<h2 id=\"3-0-Retrofit注解详情\"><a href=\"#3-0-Retrofit注解详情\" class=\"headerlink\" title=\"3.0 Retrofit注解详情\"></a>3.0 Retrofit注解详情</h2><h3 id=\"3-0-1-请求方法\"><a href=\"#3-0-1-请求方法\" class=\"headerlink\" title=\"3.0.1 请求方法\"></a>3.0.1 请求方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">请求方法</th>\n<th style=\"text-align:center\">方法简单描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">POST</td>\n<td style=\"text-align:center\">post请求，信息包含在请求体RequestBody中，一般用于添加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GET</td>\n<td style=\"text-align:center\">get请求方式，参数包含在Url ，一般用于查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DELETE</td>\n<td style=\"text-align:center\">删除数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PUT</td>\n<td style=\"text-align:center\">修改数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PATCH</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HEAD</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OPTIONS</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTTP</td>\n<td style=\"text-align:center\">@HTTP(method=”get”,path=”login/“,hasBody=true)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-0-2-标记\"><a href=\"#3-0-2-标记\" class=\"headerlink\" title=\"3.0.2 标记\"></a>3.0.2 标记</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">标记</th>\n<th style=\"text-align:center\">简单描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">表单请求</td>\n<td style=\"text-align:center\">FormUrlEncoded</td>\n<td style=\"text-align:center\">表示请求体是一个form表单，Content-Type:application/x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表单请求</td>\n<td style=\"text-align:center\">Multipart</td>\n<td style=\"text-align:center\">请求体是一个支持文件上传的form表单，Content-Type:multipart/form-data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Streaming</td>\n<td style=\"text-align:center\">表示响应体的数据用流的形式返回，如果没有使用该注解，默认会把数据全部载入内存，之后通过流获取数据也不过是读取内存中的数据，所以如果返回的数据比较大，就需要使用这个注解</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-0-3-参数注解\"><a href=\"#3-0-3-参数注解\" class=\"headerlink\" title=\"3.0.3 参数注解\"></a>3.0.3 参数注解</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">位置</th>\n<th style=\"text-align:center\">参数注解</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">作用于方法</td>\n<td style=\"text-align:center\">Headers</td>\n<td style=\"text-align:center\">用于添加请求头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Header</td>\n<td style=\"text-align:center\">用于添加不固定值得Header，也用于鉴权的目的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Body</td>\n<td style=\"text-align:center\">用于非表单请求体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Field/FieldMap</td>\n<td style=\"text-align:center\">用于表单字段，与FormUrlEncoded配合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Part/PartMap</td>\n<td style=\"text-align:center\">用于表单字段，与Multipart配合使用，用于有文件上传的情况，PartMap的接受类型是Map<string,string>，非String会调用toString()</string,string></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Path</td>\n<td style=\"text-align:center\">用于URL，参数是URL的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Query/QueryMap</td>\n<td style=\"text-align:center\">用于URL，比如：@Query(“id”)，<a href=\"http://127.0.0.1:8080/users/id=10\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/users/id=10</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Url</td>\n<td style=\"text-align:center\">完整的URL</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>{占位符}和Path尽量只用在URL的path部分，url中的参数用Query和QueryMap代替</li>\n<li>Query/Field和Part这三者都支持数组和实现了Iterable接口的类型，比如List/Set。</li>\n<li>添加head信息，动态添加和静态添加</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Call&lt;String&gt; <span class=\"title\">getData</span><span class=\"params\">(@Query(<span class=\"string\">\"item[]\"</span>)</span> List&lt;Integer&gt; item)</span>;</div><div class=\"line\">   <span class=\"comment\">// -----------------------------------</span></div><div class=\"line\">   <span class=\"meta\">@GET</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"function\">Call&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">(@Header(<span class=\"string\">\"Authorization\"</span>)</span> String authorization)</span></div><div class=\"line\"></div><div class=\"line\">   @<span class=\"title\">Headers</span><span class=\"params\">(<span class=\"string\">\"Cahce-Control:max-age=640000\"</span>)</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-0-4-数据类型转换器\"><a href=\"#3-0-4-数据类型转换器\" class=\"headerlink\" title=\"3.0.4 数据类型转换器\"></a>3.0.4 数据类型转换器</h3><p>Retrofit支持的数据类型转换器</p>\n<ul>\n<li>Gson: com.squareup.retrofit2:converter-gson:2.1.0</li>\n<li>Jackson: com.squareup.retrofit2:converter-jackson:2.1.0</li>\n<li>Moshi: com.squareup.retrofit2:converter-moshi:2.1.0</li>\n<li>Protobuf: com.squareup.retrofit2:converter-protobuf:2.1.0</li>\n<li>Wire: com.squareup.retrofit2:converter-wire:2.1.0</li>\n<li>Simple XML: com.squareup.retrofit2:converter-simplexml:2.1.0</li>\n<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars:2.1.0</li>\n</ul>\n<p>Retrofit提供的<code>CallAdapter</code>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:center\">build.gradle中的依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rxjava</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-rxjava:2.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java8</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-java8:2.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">guava</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-guava:2.1.0</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p><strong>在这次的项目中，由于服务端采用Restful原则提供接口，所以在手机客户端调用接口时，考虑使用现在很流行的Retrofit网络请求框架，很多情况下，和Retrofit搭配使用的是RxJava，他们堪称”黄金组合”，功能强大。</strong><br>","more":"<br>还有其他使用率也很高的网络框架，包括google官方提供的一个，关于在项目如何选择，可以参考stormzhang大神写的一篇博客。<br>博客地址为：<a href=\"http://stormzhang.com/opensource/2016/08/05/android-open-source-project-recommend2/\">ANDROID开源项目推荐之「网络请求哪家强」</a></p>\n<hr>\n<h2 id=\"1-0-Restful\"><a href=\"#1-0-Restful\" class=\"headerlink\" title=\"1.0 Restful\"></a>1.0 Restful</h2><p>百度百科：Restful</p>\n<blockquote>\n<p>一种软件架构风格，是一种设计风格而不是标准，只是提供了一组设计原则和约束条件，主要用于客户端和服务器交互的软件或系统。基于这个风格设计的软件可以更加简洁，更有层次，更易于实现缓存等机制。</p>\n</blockquote>\n<h2 id=\"2-0-Retrofit\"><a href=\"#2-0-Retrofit\" class=\"headerlink\" title=\"2.0 Retrofit\"></a>2.0 Retrofit</h2><blockquote>\n<p><strong>Type-safe HTTP client for Android and Java by Square</strong><br>Retrofit官网地址:<a href=\"http://square.github.io/retrofit/\">http://square.github.io/retrofit/</a><br>Retrofit github地址:<a href=\"https://github.com/square/retrofit\">https://github.com/square/retrofit</a></p>\n</blockquote>\n<h3 id=\"2-0-1-创建Retrofit对象\"><a href=\"#2-0-1-创建Retrofit对象\" class=\"headerlink\" title=\"2.0.1 创建Retrofit对象\"></a>2.0.1 创建Retrofit对象</h3><p>在项目中使用需要在模块下面的<code>build.gradle</code>中添加如下依赖：</p>\n<blockquote>\n<p>compile ‘com.squareup.retrofit2:retrofit:2.1.0’<br><br>compile ‘com.squareup.retrofit2:converter-gson:2.1.0’</p>\n</blockquote>\n<p>如果需要使用RxJava，也需要添加相应的依赖：</p>\n<blockquote>\n<p>compile ‘com.squareup.retrofit2:adapter-rxjava:2.1.0’</p>\n</blockquote>\n<p>创建Retrofit对象需要使用<code>Builder</code>，指定<code>BASR_URL</code>和添加<code>Converter</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetrofitClient</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Base_url = <span class=\"string\">\"http://\"</span>+server_addr+<span class=\"string\">\":\"</span>+port+<span class=\"string\">\"VIID-V5/\"</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Retrofit <span class=\"title\">getClient</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    \t\tRetrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">            \t.baseUrl(Base_url)</div><div class=\"line\">            \t.addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">            \t.build();</div><div class=\"line\">                </div><div class=\"line\">             <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>server_addr和port：是要请求的服务器地址和端口。在编写请求接口时，是相对base_url而言的。<br>Retrofit2必须要以<code>/</code>结束，不然会抛出<code>非法参数异常</code>。</p>\n<h3 id=\"2-0-2-请求接口定义\"><a href=\"#2-0-2-请求接口定义\" class=\"headerlink\" title=\"2.0.2 请求接口定义\"></a>2.0.2 请求接口定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginApi</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Headers</span>(&#123;<span class=\"string\">\"Contant-Type:application/json\"</span>,<span class=\"string\">\"Accept:application/json\"</span>&#125;)</div><div class=\"line\">\t<span class=\"meta\">@POST</span>(<span class=\"string\">\"login/\"</span>)</div><div class=\"line\">    <span class=\"function\">Call&lt;TokenBean&gt; <span class=\"title\">login</span><span class=\"params\">(@Body LoginInfo loginInfo)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>登录发送Post请求，因此接口含有注解<code>@POST</code>，可以看出登录请求的完整地址为<code>http://&quot;+server_addr+&quot;:&quot;+port+&quot;VIID-V5/login</code>，发送POST请求，因此含有请求消息体，为<code>JSON</code>数据格式，可以在android studio安装插件<code>Gson format</code>，将json数据格式转换为实体类。相应也是json数据，也可以转为实体类得到相应数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">\t登录请求实体类</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInfo</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">    username:admin</div><div class=\"line\">    password:admin</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String username;</div><div class=\"line\">    <span class=\"comment\">//当字段与json中的不一致时，可以使用字段@SerializedName</span></div><div class=\"line\">    <span class=\"meta\">@SerializedName</span>(<span class=\"string\">\"passwd\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String password;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.password = password;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>get()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>toString()</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">\t相应实体类：服务端相应一般都会包含错误码和错误信息</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenBean</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> errCode;</div><div class=\"line\">    <span class=\"keyword\">private</span> String errMsg;</div><div class=\"line\">    <span class=\"keyword\">private</span> String access_token;   <span class=\"comment\">//请求数据的令牌</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>set()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>get()</span></div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>toString()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-0-3-接口调用\"><a href=\"#2-0-3-接口调用\" class=\"headerlink\" title=\"2.0.3 接口调用\"></a>2.0.3 接口调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginService</span></span>&#123;</div><div class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoginApi api;</div><div class=\"line\">       <span class=\"comment\">//登陆结果回调</span></div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILoginListener</span></span>&#123;</div><div class=\"line\">       \t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginSuccess</span><span class=\"params\">()</span></span>;</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginFailed</span><span class=\"params\">(String errInfo)</span></span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(LoginInfo info,ILoginListener listener)</span></span>&#123;</div><div class=\"line\">       \tapi = Retrofit.getClient().create(LoginApi.class);   <span class=\"comment\">//代理对象</span></div><div class=\"line\">           api.login(info).enqueue(<span class=\"keyword\">new</span> Callback&lt;TokenBean&gt;()&#123;</div><div class=\"line\">           \t\t<span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;GitModel&gt; call, Response&lt;GitModel&gt; response)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">//服务端响应信息</span></div><div class=\"line\">                       <span class=\"keyword\">if</span>(response == <span class=\"keyword\">null</span> || response.body() == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"响应消息为空，检查网络连接是否正常!\"</span>);</div><div class=\"line\">                           <span class=\"keyword\">return</span>；</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       </div><div class=\"line\">                       <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">200</span> &amp;&amp; response.body().getErrCode() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                       \t<span class=\"comment\">//login successful</span></div><div class=\"line\">                           listener.loginSuccess();</div><div class=\"line\">                           <span class=\"comment\">//对于其他查询的请求，判断请求成功后，拿到服务端返回的数据</span></div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">404</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"404: 页面找不到\"</span>);</div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(response.code() == <span class=\"number\">500</span>)&#123;</div><div class=\"line\">                       \tlistener.loginFailed(<span class=\"string\">\"500: 服务器异常\"</span>);</div><div class=\"line\">                       &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                       \tlistener.loginFailed(reponse.code + <span class=\"string\">\"：其他异常信息\"</span>);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;GitModel&gt; call, Throwable t)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">//服务端响应失败的信息</span></div><div class=\"line\">                       listener.loginFailed(t.getMessage());    <span class=\"comment\">//回调出响应超时信息</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">                   &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>一般的Retrofit使用就是这样的流程，在大型项目中，可以根据项目需要，进行自定义。</p>\n<h2 id=\"3-0-Retrofit注解详情\"><a href=\"#3-0-Retrofit注解详情\" class=\"headerlink\" title=\"3.0 Retrofit注解详情\"></a>3.0 Retrofit注解详情</h2><h3 id=\"3-0-1-请求方法\"><a href=\"#3-0-1-请求方法\" class=\"headerlink\" title=\"3.0.1 请求方法\"></a>3.0.1 请求方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">请求方法</th>\n<th style=\"text-align:center\">方法简单描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">POST</td>\n<td style=\"text-align:center\">post请求，信息包含在请求体RequestBody中，一般用于添加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GET</td>\n<td style=\"text-align:center\">get请求方式，参数包含在Url ，一般用于查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DELETE</td>\n<td style=\"text-align:center\">删除数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PUT</td>\n<td style=\"text-align:center\">修改数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PATCH</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HEAD</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OPTIONS</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTTP</td>\n<td style=\"text-align:center\">@HTTP(method=”get”,path=”login/“,hasBody=true)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-0-2-标记\"><a href=\"#3-0-2-标记\" class=\"headerlink\" title=\"3.0.2 标记\"></a>3.0.2 标记</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">标记</th>\n<th style=\"text-align:center\">简单描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">表单请求</td>\n<td style=\"text-align:center\">FormUrlEncoded</td>\n<td style=\"text-align:center\">表示请求体是一个form表单，Content-Type:application/x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表单请求</td>\n<td style=\"text-align:center\">Multipart</td>\n<td style=\"text-align:center\">请求体是一个支持文件上传的form表单，Content-Type:multipart/form-data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Streaming</td>\n<td style=\"text-align:center\">表示响应体的数据用流的形式返回，如果没有使用该注解，默认会把数据全部载入内存，之后通过流获取数据也不过是读取内存中的数据，所以如果返回的数据比较大，就需要使用这个注解</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-0-3-参数注解\"><a href=\"#3-0-3-参数注解\" class=\"headerlink\" title=\"3.0.3 参数注解\"></a>3.0.3 参数注解</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">位置</th>\n<th style=\"text-align:center\">参数注解</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">作用于方法</td>\n<td style=\"text-align:center\">Headers</td>\n<td style=\"text-align:center\">用于添加请求头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Header</td>\n<td style=\"text-align:center\">用于添加不固定值得Header，也用于鉴权的目的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Body</td>\n<td style=\"text-align:center\">用于非表单请求体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Field/FieldMap</td>\n<td style=\"text-align:center\">用于表单字段，与FormUrlEncoded配合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Part/PartMap</td>\n<td style=\"text-align:center\">用于表单字段，与Multipart配合使用，用于有文件上传的情况，PartMap的接受类型是Map<String,String>，非String会调用toString()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Path</td>\n<td style=\"text-align:center\">用于URL，参数是URL的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Query/QueryMap</td>\n<td style=\"text-align:center\">用于URL，比如：@Query(“id”)，<a href=\"http://127.0.0.1:8080/users/id=10\">http://127.0.0.1:8080/users/id=10</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用于方法参数</td>\n<td style=\"text-align:center\">Url</td>\n<td style=\"text-align:center\">完整的URL</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>{占位符}和Path尽量只用在URL的path部分，url中的参数用Query和QueryMap代替</li>\n<li>Query/Field和Part这三者都支持数组和实现了Iterable接口的类型，比如List/Set。</li>\n<li>添加head信息，动态添加和静态添加</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Call&lt;String&gt; <span class=\"title\">getData</span><span class=\"params\">(@Query(<span class=\"string\">\"item[]\"</span>)</span> List&lt;Integer&gt; item)</span>;</div><div class=\"line\">   <span class=\"comment\">// -----------------------------------</span></div><div class=\"line\">   <span class=\"meta\">@GET</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"function\">Call&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">(@Header(<span class=\"string\">\"Authorization\"</span>)</span> String authorization)</div><div class=\"line\"></div><div class=\"line\">   @<span class=\"title\">Headers</span><span class=\"params\">(<span class=\"string\">\"Cahce-Control:max-age=640000\"</span>)</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"3-0-4-数据类型转换器\"><a href=\"#3-0-4-数据类型转换器\" class=\"headerlink\" title=\"3.0.4 数据类型转换器\"></a>3.0.4 数据类型转换器</h3><p>Retrofit支持的数据类型转换器</p>\n<ul>\n<li>Gson: com.squareup.retrofit2:converter-gson:2.1.0</li>\n<li>Jackson: com.squareup.retrofit2:converter-jackson:2.1.0</li>\n<li>Moshi: com.squareup.retrofit2:converter-moshi:2.1.0</li>\n<li>Protobuf: com.squareup.retrofit2:converter-protobuf:2.1.0</li>\n<li>Wire: com.squareup.retrofit2:converter-wire:2.1.0</li>\n<li>Simple XML: com.squareup.retrofit2:converter-simplexml:2.1.0</li>\n<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars:2.1.0</li>\n</ul>\n<p>Retrofit提供的<code>CallAdapter</code>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:center\">build.gradle中的依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rxjava</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-rxjava:2.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java8</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-java8:2.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">guava</td>\n<td style=\"text-align:center\">com.squareup.retrofit2:adapter-guava:2.1.0</td>\n</tr>\n</tbody>\n</table>"},{"title":"hexo start","date":"2016-09-28T02:10:10.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo start\ndate: 2016-09-28 10:10:10\ntags: \n\t- hexo\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-09-30T07:34:23.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu0z5z29000218furyav0wma","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"图片加载库Glide学习总结","date":"2016-10-08T03:13:31.000Z","toc":true,"_content":"\n最近的项目需要加载图片，小白就上网寻找这方面的资料，项目的架构为`MVP+Retrofit`，典型的网络数据请求,看了比较多的资料，于是决定使用Glide,因为数据的呈现方式都是使用ListView,用了才知道该库很牛,于是对接触到的知识点稍微归纳一下，整理学习。\n<!--more-->\n图片加载一直是一个比较棘手的事情，俗话说就是`“坑”`比较多，于是就google了一下这方面的库，有很多图片库，例如Picasso, Universal-Image-Loader,Fresco,Glide等，这些库都是很火的，使用量很大的图片库， 他们各有优点，不能评说那一个不好，根据项目的需求适当选择。\n\n## 1. 几个库的简单比较\n\n - **Picasso：**是Square出品的图片库，当然是很厉害的，该公司还有响当当的`Okhttp`和`Retrofit`，都是很牛逼的网络请求库,搭配使用效果可能更好一些，之所以这么说是因为Picasso可以将网络请求到的数据缓存交给Okhttp来处理。\n - **Universal-Image-Loader：**一个强大的图片加载库，包含的配置比较多，使用很广泛，很老牌。\n - **Fresco：**是Facebook出品的，也超强大。从知乎问答下看到该库最大的优点是5.0以下（最低2.3）的bitmap加载，在5.0以下，会将图片放到一个特别的内存存储区，称为：`Ashmem区`，在图片不显示的时候也会自动清除内存（这个是必须的），使得App更加流畅，减少图片内存占用引发的内存不足（OOM）。\n - **Glide：**谷歌推荐使用的图片加载库，Google一些图片应用就使用该库进行图片加载，用起来很流畅，可以说是在Picasso上的进一步扩展，比如支持Gif动态图，在使用时可以传入更多的上下文等等，他们两者最大的区别在于默认的设置不同，比如默认的图片格式不同，尺寸大小也不同等，在下面的链接文章中有具体的对比分析。\n - **总结：**Glide是Picasso的进一步扩展，Picasso能做的Glide也可以做，无非就是配置的不同。\n\n网上关于`Picasso`和`Glide`性能进行比较的文章挺多，不过遗憾的是，大多数都是抄来抄去的，比较清晰的是这篇：[Google推荐的图片加载库Glide介绍][1]，`Picasso`和`Glide`的使用极其相似，但也有不少细节上的区别，看了这篇文章可以大致了解一二。\n\n现在整理一下`Glide`的使用：\n\n## 2. 配置Glide\n在Module根目录下的build.gradle中进行库依赖：\n\n``` java\ndef def latestVersion = '3.7.0'\ndependencies {\n\tcompile 'com.github.bumptech.glide:glide:$latestVersion'\n    compile 'com.android.support:support-v4:19.1.0'\n}\n```\nGlide需要依赖Support Library v4。\n然后同步一下代码build successful,就可以使用Glide了。\n## 3. 使用Glide\n使用下面一段代码就能实现图片加载，看起来极其简单方便：\n``` java\n//图片的url\nprivate String image_url = \"https://www.image.com/myimage?id=1\";\nprivate ImageView imageView = (ImageView)super.findViewById(R.id.image);\nGlide.with(context)\n\t.load(image_url)\n    .into(imageView);\n```\n用这段代码就可以将url所表示的图片装到ImageView显示出来，是不是很爽呢？\nwith里面的参数相比Picasso不仅仅接受上下文Context对象，还可以是`Activity`，`Fragment`，`FragmentActivity`等，这样可以更好的让加载图片的请求与生命周期动态管理起来。Glide不仅仅支持加载网络图片，还支持以下几种加载方式：\n\n - 加载资源文件：`DrawableTypeRequest<Integer> load(Integer resourceId)`\n\n``` java\nGlide.with(context).load(R.drawable.my_image).into(imageview);\n```\n\n - 加载本地文件：`DrawableTypeRequest<File> load(File file)`\n\n``` java\nFile file = new File(\"sdcard/myimage/\",\"image.jpg\");\nGlide.with(context).load(file).into(imageView);\n```\n\n - 加载Uri：`DrawableTypeRequest<Uri> load(Uri uri)`\n\n``` java\n\nFile file = new File(Environment.getExternalStorageDirectory() + File.separator +  \"image\", \"image.jpg\");\nUri uri = Uri.fromFile(file);\nGlide.with(context).load(uri).into(imageView);\n```\n\n - String加载：`DrawableTypeRequest<String> load(String string)`\n\n### 3.1 设置占位图片\n#### 1. placehold\n图片加载并不是很实时的，加载成功的时间是不确定的，在加载时，可以设置一个图片显示在ImageView上进行一些`正在加载...`提示等等。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .placehold(R.drawable.loading)\n    .into(imageView);\n```\n#### 2. error\n在加载网络图片时，如果突然网络断掉，肯定加载不到正确的图片，这时可以设置一个错误图片到ImageView,提示用户加载失败。\n\n``` stylus\nGlide.with(context)\n\t.load(image_url)\n    .error(R.drawable.loaderror)\n    .into(imageView);\n```\n当然，也可以给Glide设置监听，当图片加载失败时，可以知道为什么加载失败了。\n\n``` java\n//设置加载图片错误时的监听\nRequestListener<String,GlideDrawable> loadErrorListener = new RequestListener<String,GlideDrawable>(){\n\t@Override\n    public boolean onException(Exception e,String model,Target<GlideDrawable> target,boolean isFirstResource){\n    \t//加载异常时回调\n        Log.e(TAG,\"exception:\" + e.toString);\n    }\n    @Override\n    public boolean onResourceReady(GlideDrawable resource,String model,Target<GlideDrawable> target,boolean isFromMemoryCache,boolean isFirstResource){\n    \t//加载成功时的回调\n        //...\n    }\n};\n\nGlide.with(context)\n\t.load(image_url)\n    .listener(loadErrorListener)\n    .into(imageView);\n```\n### 3.2 图片的调整\nGlide加载图片大小根据ImageView尺寸自动调整的，在缓存的时候也是按照图片大小进行缓存，每一种尺寸都会保留一份缓存。\n并且可以调用override(int width,int height)在图片显示到ImageView之前改变图片大小，width和height的单位都是`px`。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .override(64,64)\n    .into(imageView);\n```\n**缩放**：Glide提供了两种图形转换的标准选项：`centerCrop()`和`fitCenter`；\n\n - centerCrop()\n\n这个可以对图像进行裁剪，当图片比ImageView大的时候，会将超出ImageView的部分裁剪掉，尽可能让ImageView完全填充，但图像可能不会全部显示\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .centerCrop()\n    .into(imageView);\n```\n\n - fitCenter()\n\n它会自适应ImageView的大小，并且会完整的显示在ImageView中，但是ImageView可能不会被完全填充\n\n**设置缩略图支持**\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .thumbnail(0.1f)\n    .into(imageView);\n```\n**设置动态转换**\n在图片显示之前，可以通过`transformation`对其做一些处理，已达到想要的图片效果，为此，需要创建一个类，该类实现了`Transformation接口`，如果只是对图片进行转换，则可以直接使用Glide封装好的`BitmapTransformation抽象类`，图像的转换只需要在`transform`里实现，并重写`getId()方法`，该方法返回此次转换的唯一标识，要确保唯一性。\n\n``` java\npublic class GlideRoundTransform extends BitmapTransformation{\n\t@Override\n    protected Bitmap transform(BitmapPool pool,Bitmap toTransform,int outWidth,int outHeight){\n    \t//转换处理\n    }\n    \n    @Override\n    public String getId(){\n    \treturn getClass().getName + Math.random();\n    }\n}\n\nGlide.with(context)\n\t.load(image_url)\n    .transform(new GlideRoundTransform())\n    .into(imageView);\n```\n当图片需要多个转换时，将每种的转换类对象传入到transform()即可。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .transform(new GlideRoundTransform(this),new GlideOtherTransform(this))\n    .into(imageView);\n```\n\n### 3.3 加载的动画\n为了使图片平滑的加载到ImageView，可以设置加载的动画效果，最新的api已经默认实现了一个渐入渐出的动画效果，默认时间300ms，也可以使用`crossFade`，它接受无参或者一个int型的参数，用来指定动画执行的时间。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .crossFade(2000)    //2s\n    .into(imageView);\n```\n如果渐入渐出的动画效果不满意，可以自定义动画，使用`animate()`即可，它接受动画的资源id和动画类对象。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n\t.animate(R.anim.myAnim)\n    //.animate(new MyAnimation())\n\t.into(imageView);\n```\n如果不想使用任何动画，直接将图片显示出来，则使用`dontAnimate()`方法。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .dontAnimate()    \n    .into(imageView);\n\n```\n### 3.4 加载Gif动态图\n加载Gif动态图是Glide的一个亮点，也是将gif动态图的url传入load即可加载，Glide还提供了Gif相关的两个方法：`asBitmap()`和`asGif()`;\n\n - asBitmap()：将gif图的第一帧显示出来\n - asGif()：严格显示成gif，当传入的Url不是gif的url时，则按错误处理，可以检查load参数是否为gif。\n\n``` java\nGlide.with(context)\n\t.load(imageUrl)\n    .asBitmap()\n    .into(imageView);\n```\n\n\n### 3.5 加载优先级\n设置图片加载的顺序，有以下几种优先级：\n\n - Priority.LOW\n - Priority.NORMAL\n - Priority.HIGH\n - Priority.IMMEDIATE\n\n``` java\n Glide.with(context)\n\t.load(image_url)\n    .priority(Priority.NORMAL)    \n    .into(imageView);\n```\n### 3.6 加载目标Target\nTarget就是Glide获取资源后作用的目标，一般的ImageView就是目标。\n\n``` java\nSimpleTarget target = new SimpleTarget<Drawable>(){\n            @Override\n            public void onResourceReady(Drawable resource, GlideAnimation<? super Drawable> glideAnimation) {\n                textView.setBackground(resource);\n            }\n};\n Glide.with(context)\n\t.load(image_url)\n    .priority(Priority.NORMAL)    \n    .into(target);\n```\n这段代码是将TextView作为Target，并将加载到的图片设置为TextView的背景，SimpleTarget接收泛型数据，可以将其更改为其他想要的类型。也可以指定加载的宽度和高度，单位也是`px`。\n\n### 3.7 缓存策略\n几种缓存策略：\n\n - DiskCacheStrategy.ALL：缓存源资源和转换后的资源\n - DiskCacheStrategy.NONE：什么都不缓存\n - DiskCacheStrategy.SOURCE：只缓存源资源\n - DiskCacheStrategy.RESULT：只缓存转换后的资源\n\n``` java\nGlide.with(context)\n\t.load(imageUrl)\n    .diskCacheStrategy(DiskCacheStrategy.ALL)\n    .into(imageView);\n```\n跳过内存缓存：\n\n``` java\nGlide.with(this)\n\t.load(imageUrl)\n    .skipMemory(true)\n    .into(imageView);\n```\n### 3.8 缓存的动态清理\n\n``` java\n\nGlide.get(this).clearDiskCache();      //清理磁盘缓存，需要在子线程中执行\nGlide.get(this).clearMemory();\t\t\t//清理内存缓存，可以在UI线程中执行\n```\n\n\n## 4. 结合列表视图的使用\nGlide在滑动加载图片时表现突出，这也是Glide的优势之一，在项目中很可能是在ListView或者RecyclerView中显示加载的图片：\n1. 在使用ListView进行加载时，可以在Adapter的getView中进行使用\n\n``` java\npublic View getView(int postion,View convertView,ViewGroup parent){\n\tViewHolder holder;\n\tif(convertView == null){\n    \tholder = new ViewHolder();\n        //.....\n    }\t\n    UserInfo infos = (UserInfo)getItem(postion);\n    String imageUrl = infos.getImageUrl();\n    Glide.with(convertView.getContext()).load(imageUrl).into(holder.imageView);\n}\n\n```\n2. 在RecyclerView中使用，在 Adapter的onBindViewHolder方法中使用：\n\n``` java\npublic void onBindViewHolder(final MyHolder holder, int position){\n\tGlide.with(holder.imageView.getContext())\n    \t.load(args[position])\n        .into(holder.imageView);\n}\n```\n\nGlide缓存处理进阶可以参考这篇文章：[Android图片缓存之Glide进阶][2]\n\n\n以上就是学习Glide时的知识点整理，后面再接触到新的知识点时再进行补充。\n\n  [1]: http://blog.csdn.net/sam_zhang1984/article/details/48524893\n  [2]: http://www.cnblogs.com/whoislcj/p/5565012.html\n","source":"_posts/图片加载库Glide学习总结.md","raw":"---\ntitle: 图片加载库Glide学习总结\ndate: 2016-10-08 11:13:31\ntags:\n\t- Android\n\t- Glide\n\t- 图片加载库\ntoc: true\n---\n\n最近的项目需要加载图片，小白就上网寻找这方面的资料，项目的架构为`MVP+Retrofit`，典型的网络数据请求,看了比较多的资料，于是决定使用Glide,因为数据的呈现方式都是使用ListView,用了才知道该库很牛,于是对接触到的知识点稍微归纳一下，整理学习。\n<!--more-->\n图片加载一直是一个比较棘手的事情，俗话说就是`“坑”`比较多，于是就google了一下这方面的库，有很多图片库，例如Picasso, Universal-Image-Loader,Fresco,Glide等，这些库都是很火的，使用量很大的图片库， 他们各有优点，不能评说那一个不好，根据项目的需求适当选择。\n\n## 1. 几个库的简单比较\n\n - **Picasso：**是Square出品的图片库，当然是很厉害的，该公司还有响当当的`Okhttp`和`Retrofit`，都是很牛逼的网络请求库,搭配使用效果可能更好一些，之所以这么说是因为Picasso可以将网络请求到的数据缓存交给Okhttp来处理。\n - **Universal-Image-Loader：**一个强大的图片加载库，包含的配置比较多，使用很广泛，很老牌。\n - **Fresco：**是Facebook出品的，也超强大。从知乎问答下看到该库最大的优点是5.0以下（最低2.3）的bitmap加载，在5.0以下，会将图片放到一个特别的内存存储区，称为：`Ashmem区`，在图片不显示的时候也会自动清除内存（这个是必须的），使得App更加流畅，减少图片内存占用引发的内存不足（OOM）。\n - **Glide：**谷歌推荐使用的图片加载库，Google一些图片应用就使用该库进行图片加载，用起来很流畅，可以说是在Picasso上的进一步扩展，比如支持Gif动态图，在使用时可以传入更多的上下文等等，他们两者最大的区别在于默认的设置不同，比如默认的图片格式不同，尺寸大小也不同等，在下面的链接文章中有具体的对比分析。\n - **总结：**Glide是Picasso的进一步扩展，Picasso能做的Glide也可以做，无非就是配置的不同。\n\n网上关于`Picasso`和`Glide`性能进行比较的文章挺多，不过遗憾的是，大多数都是抄来抄去的，比较清晰的是这篇：[Google推荐的图片加载库Glide介绍][1]，`Picasso`和`Glide`的使用极其相似，但也有不少细节上的区别，看了这篇文章可以大致了解一二。\n\n现在整理一下`Glide`的使用：\n\n## 2. 配置Glide\n在Module根目录下的build.gradle中进行库依赖：\n\n``` java\ndef def latestVersion = '3.7.0'\ndependencies {\n\tcompile 'com.github.bumptech.glide:glide:$latestVersion'\n    compile 'com.android.support:support-v4:19.1.0'\n}\n```\nGlide需要依赖Support Library v4。\n然后同步一下代码build successful,就可以使用Glide了。\n## 3. 使用Glide\n使用下面一段代码就能实现图片加载，看起来极其简单方便：\n``` java\n//图片的url\nprivate String image_url = \"https://www.image.com/myimage?id=1\";\nprivate ImageView imageView = (ImageView)super.findViewById(R.id.image);\nGlide.with(context)\n\t.load(image_url)\n    .into(imageView);\n```\n用这段代码就可以将url所表示的图片装到ImageView显示出来，是不是很爽呢？\nwith里面的参数相比Picasso不仅仅接受上下文Context对象，还可以是`Activity`，`Fragment`，`FragmentActivity`等，这样可以更好的让加载图片的请求与生命周期动态管理起来。Glide不仅仅支持加载网络图片，还支持以下几种加载方式：\n\n - 加载资源文件：`DrawableTypeRequest<Integer> load(Integer resourceId)`\n\n``` java\nGlide.with(context).load(R.drawable.my_image).into(imageview);\n```\n\n - 加载本地文件：`DrawableTypeRequest<File> load(File file)`\n\n``` java\nFile file = new File(\"sdcard/myimage/\",\"image.jpg\");\nGlide.with(context).load(file).into(imageView);\n```\n\n - 加载Uri：`DrawableTypeRequest<Uri> load(Uri uri)`\n\n``` java\n\nFile file = new File(Environment.getExternalStorageDirectory() + File.separator +  \"image\", \"image.jpg\");\nUri uri = Uri.fromFile(file);\nGlide.with(context).load(uri).into(imageView);\n```\n\n - String加载：`DrawableTypeRequest<String> load(String string)`\n\n### 3.1 设置占位图片\n#### 1. placehold\n图片加载并不是很实时的，加载成功的时间是不确定的，在加载时，可以设置一个图片显示在ImageView上进行一些`正在加载...`提示等等。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .placehold(R.drawable.loading)\n    .into(imageView);\n```\n#### 2. error\n在加载网络图片时，如果突然网络断掉，肯定加载不到正确的图片，这时可以设置一个错误图片到ImageView,提示用户加载失败。\n\n``` stylus\nGlide.with(context)\n\t.load(image_url)\n    .error(R.drawable.loaderror)\n    .into(imageView);\n```\n当然，也可以给Glide设置监听，当图片加载失败时，可以知道为什么加载失败了。\n\n``` java\n//设置加载图片错误时的监听\nRequestListener<String,GlideDrawable> loadErrorListener = new RequestListener<String,GlideDrawable>(){\n\t@Override\n    public boolean onException(Exception e,String model,Target<GlideDrawable> target,boolean isFirstResource){\n    \t//加载异常时回调\n        Log.e(TAG,\"exception:\" + e.toString);\n    }\n    @Override\n    public boolean onResourceReady(GlideDrawable resource,String model,Target<GlideDrawable> target,boolean isFromMemoryCache,boolean isFirstResource){\n    \t//加载成功时的回调\n        //...\n    }\n};\n\nGlide.with(context)\n\t.load(image_url)\n    .listener(loadErrorListener)\n    .into(imageView);\n```\n### 3.2 图片的调整\nGlide加载图片大小根据ImageView尺寸自动调整的，在缓存的时候也是按照图片大小进行缓存，每一种尺寸都会保留一份缓存。\n并且可以调用override(int width,int height)在图片显示到ImageView之前改变图片大小，width和height的单位都是`px`。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .override(64,64)\n    .into(imageView);\n```\n**缩放**：Glide提供了两种图形转换的标准选项：`centerCrop()`和`fitCenter`；\n\n - centerCrop()\n\n这个可以对图像进行裁剪，当图片比ImageView大的时候，会将超出ImageView的部分裁剪掉，尽可能让ImageView完全填充，但图像可能不会全部显示\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .centerCrop()\n    .into(imageView);\n```\n\n - fitCenter()\n\n它会自适应ImageView的大小，并且会完整的显示在ImageView中，但是ImageView可能不会被完全填充\n\n**设置缩略图支持**\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .thumbnail(0.1f)\n    .into(imageView);\n```\n**设置动态转换**\n在图片显示之前，可以通过`transformation`对其做一些处理，已达到想要的图片效果，为此，需要创建一个类，该类实现了`Transformation接口`，如果只是对图片进行转换，则可以直接使用Glide封装好的`BitmapTransformation抽象类`，图像的转换只需要在`transform`里实现，并重写`getId()方法`，该方法返回此次转换的唯一标识，要确保唯一性。\n\n``` java\npublic class GlideRoundTransform extends BitmapTransformation{\n\t@Override\n    protected Bitmap transform(BitmapPool pool,Bitmap toTransform,int outWidth,int outHeight){\n    \t//转换处理\n    }\n    \n    @Override\n    public String getId(){\n    \treturn getClass().getName + Math.random();\n    }\n}\n\nGlide.with(context)\n\t.load(image_url)\n    .transform(new GlideRoundTransform())\n    .into(imageView);\n```\n当图片需要多个转换时，将每种的转换类对象传入到transform()即可。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .transform(new GlideRoundTransform(this),new GlideOtherTransform(this))\n    .into(imageView);\n```\n\n### 3.3 加载的动画\n为了使图片平滑的加载到ImageView，可以设置加载的动画效果，最新的api已经默认实现了一个渐入渐出的动画效果，默认时间300ms，也可以使用`crossFade`，它接受无参或者一个int型的参数，用来指定动画执行的时间。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .crossFade(2000)    //2s\n    .into(imageView);\n```\n如果渐入渐出的动画效果不满意，可以自定义动画，使用`animate()`即可，它接受动画的资源id和动画类对象。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n\t.animate(R.anim.myAnim)\n    //.animate(new MyAnimation())\n\t.into(imageView);\n```\n如果不想使用任何动画，直接将图片显示出来，则使用`dontAnimate()`方法。\n\n``` java\nGlide.with(context)\n\t.load(image_url)\n    .dontAnimate()    \n    .into(imageView);\n\n```\n### 3.4 加载Gif动态图\n加载Gif动态图是Glide的一个亮点，也是将gif动态图的url传入load即可加载，Glide还提供了Gif相关的两个方法：`asBitmap()`和`asGif()`;\n\n - asBitmap()：将gif图的第一帧显示出来\n - asGif()：严格显示成gif，当传入的Url不是gif的url时，则按错误处理，可以检查load参数是否为gif。\n\n``` java\nGlide.with(context)\n\t.load(imageUrl)\n    .asBitmap()\n    .into(imageView);\n```\n\n\n### 3.5 加载优先级\n设置图片加载的顺序，有以下几种优先级：\n\n - Priority.LOW\n - Priority.NORMAL\n - Priority.HIGH\n - Priority.IMMEDIATE\n\n``` java\n Glide.with(context)\n\t.load(image_url)\n    .priority(Priority.NORMAL)    \n    .into(imageView);\n```\n### 3.6 加载目标Target\nTarget就是Glide获取资源后作用的目标，一般的ImageView就是目标。\n\n``` java\nSimpleTarget target = new SimpleTarget<Drawable>(){\n            @Override\n            public void onResourceReady(Drawable resource, GlideAnimation<? super Drawable> glideAnimation) {\n                textView.setBackground(resource);\n            }\n};\n Glide.with(context)\n\t.load(image_url)\n    .priority(Priority.NORMAL)    \n    .into(target);\n```\n这段代码是将TextView作为Target，并将加载到的图片设置为TextView的背景，SimpleTarget接收泛型数据，可以将其更改为其他想要的类型。也可以指定加载的宽度和高度，单位也是`px`。\n\n### 3.7 缓存策略\n几种缓存策略：\n\n - DiskCacheStrategy.ALL：缓存源资源和转换后的资源\n - DiskCacheStrategy.NONE：什么都不缓存\n - DiskCacheStrategy.SOURCE：只缓存源资源\n - DiskCacheStrategy.RESULT：只缓存转换后的资源\n\n``` java\nGlide.with(context)\n\t.load(imageUrl)\n    .diskCacheStrategy(DiskCacheStrategy.ALL)\n    .into(imageView);\n```\n跳过内存缓存：\n\n``` java\nGlide.with(this)\n\t.load(imageUrl)\n    .skipMemory(true)\n    .into(imageView);\n```\n### 3.8 缓存的动态清理\n\n``` java\n\nGlide.get(this).clearDiskCache();      //清理磁盘缓存，需要在子线程中执行\nGlide.get(this).clearMemory();\t\t\t//清理内存缓存，可以在UI线程中执行\n```\n\n\n## 4. 结合列表视图的使用\nGlide在滑动加载图片时表现突出，这也是Glide的优势之一，在项目中很可能是在ListView或者RecyclerView中显示加载的图片：\n1. 在使用ListView进行加载时，可以在Adapter的getView中进行使用\n\n``` java\npublic View getView(int postion,View convertView,ViewGroup parent){\n\tViewHolder holder;\n\tif(convertView == null){\n    \tholder = new ViewHolder();\n        //.....\n    }\t\n    UserInfo infos = (UserInfo)getItem(postion);\n    String imageUrl = infos.getImageUrl();\n    Glide.with(convertView.getContext()).load(imageUrl).into(holder.imageView);\n}\n\n```\n2. 在RecyclerView中使用，在 Adapter的onBindViewHolder方法中使用：\n\n``` java\npublic void onBindViewHolder(final MyHolder holder, int position){\n\tGlide.with(holder.imageView.getContext())\n    \t.load(args[position])\n        .into(holder.imageView);\n}\n```\n\nGlide缓存处理进阶可以参考这篇文章：[Android图片缓存之Glide进阶][2]\n\n\n以上就是学习Glide时的知识点整理，后面再接触到新的知识点时再进行补充。\n\n  [1]: http://blog.csdn.net/sam_zhang1984/article/details/48524893\n  [2]: http://www.cnblogs.com/whoislcj/p/5565012.html\n","slug":"图片加载库Glide学习总结","published":1,"updated":"2016-10-08T07:32:35.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu0z5z2p000b18fuugscbeyb","content":"<p>最近的项目需要加载图片，小白就上网寻找这方面的资料，项目的架构为<code>MVP+Retrofit</code>，典型的网络数据请求,看了比较多的资料，于是决定使用Glide,因为数据的呈现方式都是使用ListView,用了才知道该库很牛,于是对接触到的知识点稍微归纳一下，整理学习。<br><a id=\"more\"></a><br>图片加载一直是一个比较棘手的事情，俗话说就是<code>“坑”</code>比较多，于是就google了一下这方面的库，有很多图片库，例如Picasso, Universal-Image-Loader,Fresco,Glide等，这些库都是很火的，使用量很大的图片库， 他们各有优点，不能评说那一个不好，根据项目的需求适当选择。</p>\n<h2 id=\"1-几个库的简单比较\"><a href=\"#1-几个库的简单比较\" class=\"headerlink\" title=\"1. 几个库的简单比较\"></a>1. 几个库的简单比较</h2><ul>\n<li><strong>Picasso：</strong>是Square出品的图片库，当然是很厉害的，该公司还有响当当的<code>Okhttp</code>和<code>Retrofit</code>，都是很牛逼的网络请求库,搭配使用效果可能更好一些，之所以这么说是因为Picasso可以将网络请求到的数据缓存交给Okhttp来处理。</li>\n<li><strong>Universal-Image-Loader：</strong>一个强大的图片加载库，包含的配置比较多，使用很广泛，很老牌。</li>\n<li><strong>Fresco：</strong>是Facebook出品的，也超强大。从知乎问答下看到该库最大的优点是5.0以下（最低2.3）的bitmap加载，在5.0以下，会将图片放到一个特别的内存存储区，称为：<code>Ashmem区</code>，在图片不显示的时候也会自动清除内存（这个是必须的），使得App更加流畅，减少图片内存占用引发的内存不足（OOM）。</li>\n<li><strong>Glide：</strong>谷歌推荐使用的图片加载库，Google一些图片应用就使用该库进行图片加载，用起来很流畅，可以说是在Picasso上的进一步扩展，比如支持Gif动态图，在使用时可以传入更多的上下文等等，他们两者最大的区别在于默认的设置不同，比如默认的图片格式不同，尺寸大小也不同等，在下面的链接文章中有具体的对比分析。</li>\n<li><strong>总结：</strong>Glide是Picasso的进一步扩展，Picasso能做的Glide也可以做，无非就是配置的不同。</li>\n</ul>\n<p>网上关于<code>Picasso</code>和<code>Glide</code>性能进行比较的文章挺多，不过遗憾的是，大多数都是抄来抄去的，比较清晰的是这篇：<a href=\"http://blog.csdn.net/sam_zhang1984/article/details/48524893\" target=\"_blank\" rel=\"external\">Google推荐的图片加载库Glide介绍</a>，<code>Picasso</code>和<code>Glide</code>的使用极其相似，但也有不少细节上的区别，看了这篇文章可以大致了解一二。</p>\n<p>现在整理一下<code>Glide</code>的使用：</p>\n<h2 id=\"2-配置Glide\"><a href=\"#2-配置Glide\" class=\"headerlink\" title=\"2. 配置Glide\"></a>2. 配置Glide</h2><p>在Module根目录下的build.gradle中进行库依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def def latestVersion = <span class=\"string\">'3.7.0'</span></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile <span class=\"string\">'com.github.bumptech.glide:glide:$latestVersion'</span></div><div class=\"line\">    compile <span class=\"string\">'com.android.support:support-v4:19.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Glide需要依赖Support Library v4。<br>然后同步一下代码build successful,就可以使用Glide了。</p>\n<h2 id=\"3-使用Glide\"><a href=\"#3-使用Glide\" class=\"headerlink\" title=\"3. 使用Glide\"></a>3. 使用Glide</h2><p>使用下面一段代码就能实现图片加载，看起来极其简单方便：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//图片的url</span></div><div class=\"line\"><span class=\"keyword\">private</span> String image_url = <span class=\"string\">\"https://www.image.com/myimage?id=1\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> ImageView imageView = (ImageView)<span class=\"keyword\">super</span>.findViewById(R.id.image);</div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure></p>\n<p>用这段代码就可以将url所表示的图片装到ImageView显示出来，是不是很爽呢？<br>with里面的参数相比Picasso不仅仅接受上下文Context对象，还可以是<code>Activity</code>，<code>Fragment</code>，<code>FragmentActivity</code>等，这样可以更好的让加载图片的请求与生命周期动态管理起来。Glide不仅仅支持加载网络图片，还支持以下几种加载方式：</p>\n<ul>\n<li>加载资源文件：<code>DrawableTypeRequest&lt;Integer&gt; load(Integer resourceId)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context).load(R.drawable.my_image).into(imageview);</div></pre></td></tr></table></figure>\n<ul>\n<li>加载本地文件：<code>DrawableTypeRequest&lt;File&gt; load(File file)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"sdcard/myimage/\"</span>,<span class=\"string\">\"image.jpg\"</span>);</div><div class=\"line\">Glide.with(context).load(file).into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>加载Uri：<code>DrawableTypeRequest&lt;Uri&gt; load(Uri uri)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">File file = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory() + File.separator +  <span class=\"string\">\"image\"</span>, <span class=\"string\">\"image.jpg\"</span>);</div><div class=\"line\">Uri uri = Uri.fromFile(file);</div><div class=\"line\">Glide.with(context).load(uri).into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>String加载：<code>DrawableTypeRequest&lt;String&gt; load(String string)</code></li>\n</ul>\n<h3 id=\"3-1-设置占位图片\"><a href=\"#3-1-设置占位图片\" class=\"headerlink\" title=\"3.1 设置占位图片\"></a>3.1 设置占位图片</h3><h4 id=\"1-placehold\"><a href=\"#1-placehold\" class=\"headerlink\" title=\"1. placehold\"></a>1. placehold</h4><p>图片加载并不是很实时的，加载成功的时间是不确定的，在加载时，可以设置一个图片显示在ImageView上进行一些<code>正在加载...</code>提示等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .placehold(R.drawable.loading)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h4 id=\"2-error\"><a href=\"#2-error\" class=\"headerlink\" title=\"2. error\"></a>2. error</h4><p>在加载网络图片时，如果突然网络断掉，肯定加载不到正确的图片，这时可以设置一个错误图片到ImageView,提示用户加载失败。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .error(R.drawable.loaderror)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>当然，也可以给Glide设置监听，当图片加载失败时，可以知道为什么加载失败了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置加载图片错误时的监听</span></div><div class=\"line\">RequestListener&lt;String,GlideDrawable&gt; loadErrorListener = <span class=\"keyword\">new</span> RequestListener&lt;String,GlideDrawable&gt;()&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onException</span><span class=\"params\">(Exception e,String model,Target&lt;GlideDrawable&gt; target,<span class=\"keyword\">boolean</span> isFirstResource)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//加载异常时回调</span></div><div class=\"line\">        Log.e(TAG,<span class=\"string\">\"exception:\"</span> + e.toString);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(GlideDrawable resource,String model,Target&lt;GlideDrawable&gt; target,<span class=\"keyword\">boolean</span> isFromMemoryCache,<span class=\"keyword\">boolean</span> isFirstResource)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//加载成功时的回调</span></div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .listener(loadErrorListener)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-图片的调整\"><a href=\"#3-2-图片的调整\" class=\"headerlink\" title=\"3.2 图片的调整\"></a>3.2 图片的调整</h3><p>Glide加载图片大小根据ImageView尺寸自动调整的，在缓存的时候也是按照图片大小进行缓存，每一种尺寸都会保留一份缓存。<br>并且可以调用override(int width,int height)在图片显示到ImageView之前改变图片大小，width和height的单位都是<code>px</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .override(<span class=\"number\">64</span>,<span class=\"number\">64</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p><strong>缩放</strong>：Glide提供了两种图形转换的标准选项：<code>centerCrop()</code>和<code>fitCenter</code>；</p>\n<ul>\n<li>centerCrop()</li>\n</ul>\n<p>这个可以对图像进行裁剪，当图片比ImageView大的时候，会将超出ImageView的部分裁剪掉，尽可能让ImageView完全填充，但图像可能不会全部显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .centerCrop()</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>fitCenter()</li>\n</ul>\n<p>它会自适应ImageView的大小，并且会完整的显示在ImageView中，但是ImageView可能不会被完全填充</p>\n<p><strong>设置缩略图支持</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .thumbnail(<span class=\"number\">0.1f</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p><strong>设置动态转换</strong><br>在图片显示之前，可以通过<code>transformation</code>对其做一些处理，已达到想要的图片效果，为此，需要创建一个类，该类实现了<code>Transformation接口</code>，如果只是对图片进行转换，则可以直接使用Glide封装好的<code>BitmapTransformation抽象类</code>，图像的转换只需要在<code>transform</code>里实现，并重写<code>getId()方法</code>，该方法返回此次转换的唯一标识，要确保唯一性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideRoundTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool,Bitmap toTransform,<span class=\"keyword\">int</span> outWidth,<span class=\"keyword\">int</span> outHeight)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//转换处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> getClass().getName + Math.random();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .transform(<span class=\"keyword\">new</span> GlideRoundTransform())</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>当图片需要多个转换时，将每种的转换类对象传入到transform()即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .transform(<span class=\"keyword\">new</span> GlideRoundTransform(<span class=\"keyword\">this</span>),<span class=\"keyword\">new</span> GlideOtherTransform(<span class=\"keyword\">this</span>))</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-3-加载的动画\"><a href=\"#3-3-加载的动画\" class=\"headerlink\" title=\"3.3 加载的动画\"></a>3.3 加载的动画</h3><p>为了使图片平滑的加载到ImageView，可以设置加载的动画效果，最新的api已经默认实现了一个渐入渐出的动画效果，默认时间300ms，也可以使用<code>crossFade</code>，它接受无参或者一个int型的参数，用来指定动画执行的时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .crossFade(<span class=\"number\">2000</span>)    <span class=\"comment\">//2s</span></div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>如果渐入渐出的动画效果不满意，可以自定义动画，使用<code>animate()</code>即可，它接受动画的资源id和动画类对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">\t.animate(R.anim.myAnim)</div><div class=\"line\">    <span class=\"comment\">//.animate(new MyAnimation())</span></div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>\n<p>如果不想使用任何动画，直接将图片显示出来，则使用<code>dontAnimate()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .dontAnimate()    </div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-加载Gif动态图\"><a href=\"#3-4-加载Gif动态图\" class=\"headerlink\" title=\"3.4 加载Gif动态图\"></a>3.4 加载Gif动态图</h3><p>加载Gif动态图是Glide的一个亮点，也是将gif动态图的url传入load即可加载，Glide还提供了Gif相关的两个方法：<code>asBitmap()</code>和<code>asGif()</code>;</p>\n<ul>\n<li>asBitmap()：将gif图的第一帧显示出来</li>\n<li>asGif()：严格显示成gif，当传入的Url不是gif的url时，则按错误处理，可以检查load参数是否为gif。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .asBitmap()</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-5-加载优先级\"><a href=\"#3-5-加载优先级\" class=\"headerlink\" title=\"3.5 加载优先级\"></a>3.5 加载优先级</h3><p>设置图片加载的顺序，有以下几种优先级：</p>\n<ul>\n<li>Priority.LOW</li>\n<li>Priority.NORMAL</li>\n<li>Priority.HIGH</li>\n<li>Priority.IMMEDIATE</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">.load(image_url)</div><div class=\"line\">   .priority(Priority.NORMAL)    </div><div class=\"line\">   .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-6-加载目标Target\"><a href=\"#3-6-加载目标Target\" class=\"headerlink\" title=\"3.6 加载目标Target\"></a>3.6 加载目标Target</h3><p>Target就是Glide获取资源后作用的目标，一般的ImageView就是目标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleTarget target = <span class=\"keyword\">new</span> SimpleTarget&lt;Drawable&gt;()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(Drawable resource, GlideAnimation&lt;? <span class=\"keyword\">super</span> Drawable&gt; glideAnimation)</span> </span>&#123;</div><div class=\"line\">                textView.setBackground(resource);</div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .priority(Priority.NORMAL)    </div><div class=\"line\">    .into(target);</div></pre></td></tr></table></figure>\n<p>这段代码是将TextView作为Target，并将加载到的图片设置为TextView的背景，SimpleTarget接收泛型数据，可以将其更改为其他想要的类型。也可以指定加载的宽度和高度，单位也是<code>px</code>。</p>\n<h3 id=\"3-7-缓存策略\"><a href=\"#3-7-缓存策略\" class=\"headerlink\" title=\"3.7 缓存策略\"></a>3.7 缓存策略</h3><p>几种缓存策略：</p>\n<ul>\n<li>DiskCacheStrategy.ALL：缓存源资源和转换后的资源</li>\n<li>DiskCacheStrategy.NONE：什么都不缓存</li>\n<li>DiskCacheStrategy.SOURCE：只缓存源资源</li>\n<li>DiskCacheStrategy.RESULT：只缓存转换后的资源</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .diskCacheStrategy(DiskCacheStrategy.ALL)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>跳过内存缓存：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(<span class=\"keyword\">this</span>)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .skipMemory(<span class=\"keyword\">true</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-8-缓存的动态清理\"><a href=\"#3-8-缓存的动态清理\" class=\"headerlink\" title=\"3.8 缓存的动态清理\"></a>3.8 缓存的动态清理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Glide.get(<span class=\"keyword\">this</span>).clearDiskCache();      <span class=\"comment\">//清理磁盘缓存，需要在子线程中执行</span></div><div class=\"line\">Glide.get(<span class=\"keyword\">this</span>).clearMemory();\t\t\t<span class=\"comment\">//清理内存缓存，可以在UI线程中执行</span></div></pre></td></tr></table></figure>\n<h2 id=\"4-结合列表视图的使用\"><a href=\"#4-结合列表视图的使用\" class=\"headerlink\" title=\"4. 结合列表视图的使用\"></a>4. 结合列表视图的使用</h2><p>Glide在滑动加载图片时表现突出，这也是Glide的优势之一，在项目中很可能是在ListView或者RecyclerView中显示加载的图片：</p>\n<ol>\n<li>在使用ListView进行加载时，可以在Adapter的getView中进行使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> postion,View convertView,ViewGroup parent)</span></span>&#123;</div><div class=\"line\">\tViewHolder holder;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(convertView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    \tholder = <span class=\"keyword\">new</span> ViewHolder();</div><div class=\"line\">        <span class=\"comment\">//.....</span></div><div class=\"line\">    &#125;\t</div><div class=\"line\">    UserInfo infos = (UserInfo)getItem(postion);</div><div class=\"line\">    String imageUrl = infos.getImageUrl();</div><div class=\"line\">    Glide.with(convertView.getContext()).load(imageUrl).into(holder.imageView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>在RecyclerView中使用，在 Adapter的onBindViewHolder方法中使用：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(<span class=\"keyword\">final</span> MyHolder holder, <span class=\"keyword\">int</span> position)</span></span>&#123;</div><div class=\"line\">\tGlide.with(holder.imageView.getContext())</div><div class=\"line\">    \t.load(args[position])</div><div class=\"line\">        .into(holder.imageView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Glide缓存处理进阶可以参考这篇文章：<a href=\"http://www.cnblogs.com/whoislcj/p/5565012.html\" target=\"_blank\" rel=\"external\">Android图片缓存之Glide进阶</a></p>\n<p>以上就是学习Glide时的知识点整理，后面再接触到新的知识点时再进行补充。</p>\n","excerpt":"<p>最近的项目需要加载图片，小白就上网寻找这方面的资料，项目的架构为<code>MVP+Retrofit</code>，典型的网络数据请求,看了比较多的资料，于是决定使用Glide,因为数据的呈现方式都是使用ListView,用了才知道该库很牛,于是对接触到的知识点稍微归纳一下，整理学习。<br>","more":"<br>图片加载一直是一个比较棘手的事情，俗话说就是<code>“坑”</code>比较多，于是就google了一下这方面的库，有很多图片库，例如Picasso, Universal-Image-Loader,Fresco,Glide等，这些库都是很火的，使用量很大的图片库， 他们各有优点，不能评说那一个不好，根据项目的需求适当选择。</p>\n<h2 id=\"1-几个库的简单比较\"><a href=\"#1-几个库的简单比较\" class=\"headerlink\" title=\"1. 几个库的简单比较\"></a>1. 几个库的简单比较</h2><ul>\n<li><strong>Picasso：</strong>是Square出品的图片库，当然是很厉害的，该公司还有响当当的<code>Okhttp</code>和<code>Retrofit</code>，都是很牛逼的网络请求库,搭配使用效果可能更好一些，之所以这么说是因为Picasso可以将网络请求到的数据缓存交给Okhttp来处理。</li>\n<li><strong>Universal-Image-Loader：</strong>一个强大的图片加载库，包含的配置比较多，使用很广泛，很老牌。</li>\n<li><strong>Fresco：</strong>是Facebook出品的，也超强大。从知乎问答下看到该库最大的优点是5.0以下（最低2.3）的bitmap加载，在5.0以下，会将图片放到一个特别的内存存储区，称为：<code>Ashmem区</code>，在图片不显示的时候也会自动清除内存（这个是必须的），使得App更加流畅，减少图片内存占用引发的内存不足（OOM）。</li>\n<li><strong>Glide：</strong>谷歌推荐使用的图片加载库，Google一些图片应用就使用该库进行图片加载，用起来很流畅，可以说是在Picasso上的进一步扩展，比如支持Gif动态图，在使用时可以传入更多的上下文等等，他们两者最大的区别在于默认的设置不同，比如默认的图片格式不同，尺寸大小也不同等，在下面的链接文章中有具体的对比分析。</li>\n<li><strong>总结：</strong>Glide是Picasso的进一步扩展，Picasso能做的Glide也可以做，无非就是配置的不同。</li>\n</ul>\n<p>网上关于<code>Picasso</code>和<code>Glide</code>性能进行比较的文章挺多，不过遗憾的是，大多数都是抄来抄去的，比较清晰的是这篇：<a href=\"http://blog.csdn.net/sam_zhang1984/article/details/48524893\">Google推荐的图片加载库Glide介绍</a>，<code>Picasso</code>和<code>Glide</code>的使用极其相似，但也有不少细节上的区别，看了这篇文章可以大致了解一二。</p>\n<p>现在整理一下<code>Glide</code>的使用：</p>\n<h2 id=\"2-配置Glide\"><a href=\"#2-配置Glide\" class=\"headerlink\" title=\"2. 配置Glide\"></a>2. 配置Glide</h2><p>在Module根目录下的build.gradle中进行库依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def def latestVersion = <span class=\"string\">'3.7.0'</span></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile <span class=\"string\">'com.github.bumptech.glide:glide:$latestVersion'</span></div><div class=\"line\">    compile <span class=\"string\">'com.android.support:support-v4:19.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Glide需要依赖Support Library v4。<br>然后同步一下代码build successful,就可以使用Glide了。</p>\n<h2 id=\"3-使用Glide\"><a href=\"#3-使用Glide\" class=\"headerlink\" title=\"3. 使用Glide\"></a>3. 使用Glide</h2><p>使用下面一段代码就能实现图片加载，看起来极其简单方便：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//图片的url</span></div><div class=\"line\"><span class=\"keyword\">private</span> String image_url = <span class=\"string\">\"https://www.image.com/myimage?id=1\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> ImageView imageView = (ImageView)<span class=\"keyword\">super</span>.findViewById(R.id.image);</div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure></p>\n<p>用这段代码就可以将url所表示的图片装到ImageView显示出来，是不是很爽呢？<br>with里面的参数相比Picasso不仅仅接受上下文Context对象，还可以是<code>Activity</code>，<code>Fragment</code>，<code>FragmentActivity</code>等，这样可以更好的让加载图片的请求与生命周期动态管理起来。Glide不仅仅支持加载网络图片，还支持以下几种加载方式：</p>\n<ul>\n<li>加载资源文件：<code>DrawableTypeRequest&lt;Integer&gt; load(Integer resourceId)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context).load(R.drawable.my_image).into(imageview);</div></pre></td></tr></table></figure>\n<ul>\n<li>加载本地文件：<code>DrawableTypeRequest&lt;File&gt; load(File file)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"sdcard/myimage/\"</span>,<span class=\"string\">\"image.jpg\"</span>);</div><div class=\"line\">Glide.with(context).load(file).into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>加载Uri：<code>DrawableTypeRequest&lt;Uri&gt; load(Uri uri)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">File file = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory() + File.separator +  <span class=\"string\">\"image\"</span>, <span class=\"string\">\"image.jpg\"</span>);</div><div class=\"line\">Uri uri = Uri.fromFile(file);</div><div class=\"line\">Glide.with(context).load(uri).into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>String加载：<code>DrawableTypeRequest&lt;String&gt; load(String string)</code></li>\n</ul>\n<h3 id=\"3-1-设置占位图片\"><a href=\"#3-1-设置占位图片\" class=\"headerlink\" title=\"3.1 设置占位图片\"></a>3.1 设置占位图片</h3><h4 id=\"1-placehold\"><a href=\"#1-placehold\" class=\"headerlink\" title=\"1. placehold\"></a>1. placehold</h4><p>图片加载并不是很实时的，加载成功的时间是不确定的，在加载时，可以设置一个图片显示在ImageView上进行一些<code>正在加载...</code>提示等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .placehold(R.drawable.loading)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h4 id=\"2-error\"><a href=\"#2-error\" class=\"headerlink\" title=\"2. error\"></a>2. error</h4><p>在加载网络图片时，如果突然网络断掉，肯定加载不到正确的图片，这时可以设置一个错误图片到ImageView,提示用户加载失败。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .error(R.drawable.loaderror)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>当然，也可以给Glide设置监听，当图片加载失败时，可以知道为什么加载失败了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置加载图片错误时的监听</span></div><div class=\"line\">RequestListener&lt;String,GlideDrawable&gt; loadErrorListener = <span class=\"keyword\">new</span> RequestListener&lt;String,GlideDrawable&gt;()&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onException</span><span class=\"params\">(Exception e,String model,Target&lt;GlideDrawable&gt; target,<span class=\"keyword\">boolean</span> isFirstResource)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//加载异常时回调</span></div><div class=\"line\">        Log.e(TAG,<span class=\"string\">\"exception:\"</span> + e.toString);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(GlideDrawable resource,String model,Target&lt;GlideDrawable&gt; target,<span class=\"keyword\">boolean</span> isFromMemoryCache,<span class=\"keyword\">boolean</span> isFirstResource)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//加载成功时的回调</span></div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .listener(loadErrorListener)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-图片的调整\"><a href=\"#3-2-图片的调整\" class=\"headerlink\" title=\"3.2 图片的调整\"></a>3.2 图片的调整</h3><p>Glide加载图片大小根据ImageView尺寸自动调整的，在缓存的时候也是按照图片大小进行缓存，每一种尺寸都会保留一份缓存。<br>并且可以调用override(int width,int height)在图片显示到ImageView之前改变图片大小，width和height的单位都是<code>px</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .override(<span class=\"number\">64</span>,<span class=\"number\">64</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p><strong>缩放</strong>：Glide提供了两种图形转换的标准选项：<code>centerCrop()</code>和<code>fitCenter</code>；</p>\n<ul>\n<li>centerCrop()</li>\n</ul>\n<p>这个可以对图像进行裁剪，当图片比ImageView大的时候，会将超出ImageView的部分裁剪掉，尽可能让ImageView完全填充，但图像可能不会全部显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .centerCrop()</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<ul>\n<li>fitCenter()</li>\n</ul>\n<p>它会自适应ImageView的大小，并且会完整的显示在ImageView中，但是ImageView可能不会被完全填充</p>\n<p><strong>设置缩略图支持</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .thumbnail(<span class=\"number\">0.1f</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p><strong>设置动态转换</strong><br>在图片显示之前，可以通过<code>transformation</code>对其做一些处理，已达到想要的图片效果，为此，需要创建一个类，该类实现了<code>Transformation接口</code>，如果只是对图片进行转换，则可以直接使用Glide封装好的<code>BitmapTransformation抽象类</code>，图像的转换只需要在<code>transform</code>里实现，并重写<code>getId()方法</code>，该方法返回此次转换的唯一标识，要确保唯一性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideRoundTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool,Bitmap toTransform,<span class=\"keyword\">int</span> outWidth,<span class=\"keyword\">int</span> outHeight)</span></span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//转换处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> getClass().getName + Math.random();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .transform(<span class=\"keyword\">new</span> GlideRoundTransform())</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>当图片需要多个转换时，将每种的转换类对象传入到transform()即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .transform(<span class=\"keyword\">new</span> GlideRoundTransform(<span class=\"keyword\">this</span>),<span class=\"keyword\">new</span> GlideOtherTransform(<span class=\"keyword\">this</span>))</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-3-加载的动画\"><a href=\"#3-3-加载的动画\" class=\"headerlink\" title=\"3.3 加载的动画\"></a>3.3 加载的动画</h3><p>为了使图片平滑的加载到ImageView，可以设置加载的动画效果，最新的api已经默认实现了一个渐入渐出的动画效果，默认时间300ms，也可以使用<code>crossFade</code>，它接受无参或者一个int型的参数，用来指定动画执行的时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .crossFade(<span class=\"number\">2000</span>)    <span class=\"comment\">//2s</span></div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>如果渐入渐出的动画效果不满意，可以自定义动画，使用<code>animate()</code>即可，它接受动画的资源id和动画类对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">\t.animate(R.anim.myAnim)</div><div class=\"line\">    <span class=\"comment\">//.animate(new MyAnimation())</span></div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>\n<p>如果不想使用任何动画，直接将图片显示出来，则使用<code>dontAnimate()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .dontAnimate()    </div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-加载Gif动态图\"><a href=\"#3-4-加载Gif动态图\" class=\"headerlink\" title=\"3.4 加载Gif动态图\"></a>3.4 加载Gif动态图</h3><p>加载Gif动态图是Glide的一个亮点，也是将gif动态图的url传入load即可加载，Glide还提供了Gif相关的两个方法：<code>asBitmap()</code>和<code>asGif()</code>;</p>\n<ul>\n<li>asBitmap()：将gif图的第一帧显示出来</li>\n<li>asGif()：严格显示成gif，当传入的Url不是gif的url时，则按错误处理，可以检查load参数是否为gif。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .asBitmap()</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-5-加载优先级\"><a href=\"#3-5-加载优先级\" class=\"headerlink\" title=\"3.5 加载优先级\"></a>3.5 加载优先级</h3><p>设置图片加载的顺序，有以下几种优先级：</p>\n<ul>\n<li>Priority.LOW</li>\n<li>Priority.NORMAL</li>\n<li>Priority.HIGH</li>\n<li>Priority.IMMEDIATE</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">.load(image_url)</div><div class=\"line\">   .priority(Priority.NORMAL)    </div><div class=\"line\">   .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-6-加载目标Target\"><a href=\"#3-6-加载目标Target\" class=\"headerlink\" title=\"3.6 加载目标Target\"></a>3.6 加载目标Target</h3><p>Target就是Glide获取资源后作用的目标，一般的ImageView就是目标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleTarget target = <span class=\"keyword\">new</span> SimpleTarget&lt;Drawable&gt;()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(Drawable resource, GlideAnimation&lt;? <span class=\"keyword\">super</span> Drawable&gt; glideAnimation)</span> </span>&#123;</div><div class=\"line\">                textView.setBackground(resource);</div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> Glide.with(context)</div><div class=\"line\">\t.load(image_url)</div><div class=\"line\">    .priority(Priority.NORMAL)    </div><div class=\"line\">    .into(target);</div></pre></td></tr></table></figure>\n<p>这段代码是将TextView作为Target，并将加载到的图片设置为TextView的背景，SimpleTarget接收泛型数据，可以将其更改为其他想要的类型。也可以指定加载的宽度和高度，单位也是<code>px</code>。</p>\n<h3 id=\"3-7-缓存策略\"><a href=\"#3-7-缓存策略\" class=\"headerlink\" title=\"3.7 缓存策略\"></a>3.7 缓存策略</h3><p>几种缓存策略：</p>\n<ul>\n<li>DiskCacheStrategy.ALL：缓存源资源和转换后的资源</li>\n<li>DiskCacheStrategy.NONE：什么都不缓存</li>\n<li>DiskCacheStrategy.SOURCE：只缓存源资源</li>\n<li>DiskCacheStrategy.RESULT：只缓存转换后的资源</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .diskCacheStrategy(DiskCacheStrategy.ALL)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<p>跳过内存缓存：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(<span class=\"keyword\">this</span>)</div><div class=\"line\">\t.load(imageUrl)</div><div class=\"line\">    .skipMemory(<span class=\"keyword\">true</span>)</div><div class=\"line\">    .into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"3-8-缓存的动态清理\"><a href=\"#3-8-缓存的动态清理\" class=\"headerlink\" title=\"3.8 缓存的动态清理\"></a>3.8 缓存的动态清理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Glide.get(<span class=\"keyword\">this</span>).clearDiskCache();      <span class=\"comment\">//清理磁盘缓存，需要在子线程中执行</span></div><div class=\"line\">Glide.get(<span class=\"keyword\">this</span>).clearMemory();\t\t\t<span class=\"comment\">//清理内存缓存，可以在UI线程中执行</span></div></pre></td></tr></table></figure>\n<h2 id=\"4-结合列表视图的使用\"><a href=\"#4-结合列表视图的使用\" class=\"headerlink\" title=\"4. 结合列表视图的使用\"></a>4. 结合列表视图的使用</h2><p>Glide在滑动加载图片时表现突出，这也是Glide的优势之一，在项目中很可能是在ListView或者RecyclerView中显示加载的图片：</p>\n<ol>\n<li>在使用ListView进行加载时，可以在Adapter的getView中进行使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> postion,View convertView,ViewGroup parent)</span></span>&#123;</div><div class=\"line\">\tViewHolder holder;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(convertView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    \tholder = <span class=\"keyword\">new</span> ViewHolder();</div><div class=\"line\">        <span class=\"comment\">//.....</span></div><div class=\"line\">    &#125;\t</div><div class=\"line\">    UserInfo infos = (UserInfo)getItem(postion);</div><div class=\"line\">    String imageUrl = infos.getImageUrl();</div><div class=\"line\">    Glide.with(convertView.getContext()).load(imageUrl).into(holder.imageView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>在RecyclerView中使用，在 Adapter的onBindViewHolder方法中使用：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(<span class=\"keyword\">final</span> MyHolder holder, <span class=\"keyword\">int</span> position)</span></span>&#123;</div><div class=\"line\">\tGlide.with(holder.imageView.getContext())</div><div class=\"line\">    \t.load(args[position])</div><div class=\"line\">        .into(holder.imageView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Glide缓存处理进阶可以参考这篇文章：<a href=\"http://www.cnblogs.com/whoislcj/p/5565012.html\">Android图片缓存之Glide进阶</a></p>\n<p>以上就是学习Glide时的知识点整理，后面再接触到新的知识点时再进行补充。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciu0z5z25000118fur00qxup1","tag_id":"ciu0z5z2b000318fu52vonyh5","_id":"ciu0z5z2e000718fuqujh7c7s"},{"post_id":"ciu0z5z25000118fur00qxup1","tag_id":"ciu0z5z2d000418fuhvoxfy1e","_id":"ciu0z5z2e000818fu7s7vblyx"},{"post_id":"ciu0z5z25000118fur00qxup1","tag_id":"ciu0z5z2d000518fu8h4mtlv8","_id":"ciu0z5z2f000918fu69y5vlo2"},{"post_id":"ciu0z5z29000218furyav0wma","tag_id":"ciu0z5z2e000618fuxpn9x9se","_id":"ciu0z5z2f000a18fujxhayrs2"},{"post_id":"ciu0z5z2p000b18fuugscbeyb","tag_id":"ciu0z5z2b000318fu52vonyh5","_id":"ciu0z5z2u000f18fubb37szzq"},{"post_id":"ciu0z5z2p000b18fuugscbeyb","tag_id":"ciu0z5z2t000d18fumm9me303","_id":"ciu0z5z2u000g18fuwm3ablx8"},{"post_id":"ciu0z5z2p000b18fuugscbeyb","tag_id":"ciu0z5z2t000e18fu5ajmaz2l","_id":"ciu0z5z2u000h18futgsreu9m"}],"Tag":[{"name":"Android","_id":"ciu0z5z2b000318fu52vonyh5"},{"name":"Retrofit","_id":"ciu0z5z2d000418fuhvoxfy1e"},{"name":"Http","_id":"ciu0z5z2d000518fu8h4mtlv8"},{"name":"hexo","_id":"ciu0z5z2e000618fuxpn9x9se"},{"name":"Glide","_id":"ciu0z5z2t000d18fumm9me303"},{"name":"图片加载库","_id":"ciu0z5z2t000e18fu5ajmaz2l"}]}}